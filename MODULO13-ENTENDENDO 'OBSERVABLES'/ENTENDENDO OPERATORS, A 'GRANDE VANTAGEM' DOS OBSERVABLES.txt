







-> OPERATORS...











--> É NICE O QUE APRENDEMOS, MAS HÁ ALGO SUPER IMPORTANTE 

SOBRE OBSERVABLES E A LIBRARY DO RXJS 

QUE 



VOCÊ TEM DE SABER...










--> SÃO OPERATORS...







-> SÃO A MAGIC FEATURE  

DA RXJS 

LIBRARY...







--> SÃO A COISA QUE 


TRANSFORMA



OBSERVABLES EM 'AWESOME CONSTRUCTS'...














--> DIGAMOS QUE 

 

 TEMOS OBSERVABLES E AÍ UM OBSERVER...












 -> E É CLARO QUE 
 OBTEMOS 



 _-DATA__ A PARTIR 


 DO 


 observable... -->  E AÍ 




 FAZEMOS 


 'LISTEN TO' A 

 ESSA 

 DATA,


 POR MEIO 

 DE UMA SUBSCRIPTION ---------> ENTRETANTO,





 ÀS vezes 



 VOCÊ NÃO VAI QUERER/PRECISAR DA 

 'RAW DATA' 





 ENTERGUE PELO OBSERVABLE.. --> àS VEZES VOCê VAI QUERER 






 __TRANSFORMAR A DATA,




 OU ENTÃO 'FILTER OUT' 




 ALGUNS DATA POINTS DESSES 'EVENTS'/data packets ------->  E É CLARO QUE 







 VOCÊ PODERIA FAZER TUDO ISSO_ _ DENTRO DE SUA 

 SUBSCRIPTION,




 OU _ DENTRO __ DA FUNCTION QEU VOCê PASSA A SUA SUBSCRIPTION....













 --> MAS EXISTE _ UMA MANEIRA _ MAIS ELEGANTE __ DE MANIPULAR _ 



 ESSES VALUESa.... 











 -----> EM VEZ DE 





SETTAR SUA SUBSCRIPTION 


COM AQUELE FORMATO/ORGANIZAÇÃO DE 




''





    customIntervalObservable.subscribe(
        (count) => { //será um NUMBER...  ////// O PRIMEIRO PARÂMETRO DE '.subscribe()' (nossa subscription) é '''A LÓGICA QUE EXECUTAMOS SE FOR RECEBIDA UMA DATA PACKAGE COMUM, VINDA DE NOSSO OBSERVABLE''''...

            console.log(count);
            console.log('DATA --  data package emitted by observable. We can run some logic for EACH data packet that is emitted.')
        },
        (error) => {  //O SEGUNDO PARÂMETRO DE '.subscribe()' (nossa subscription) é '''A LÓGICA QUE EXECUTAMOS SE FOR RECEBIDA UMA DATA PACKAGE __DE ERRO___ (que interrompe o emit de data da observable), VINDA DE NOSSO OBSERVABLE''''...
          console.log(error);
          console.log('ERROR -- "ERROR" data package emitted by observable. Observable data emissions stopped.')
      },
      () => {   /////COMO O 'observer.complete()' NÃO NOS PASSA NENHUM ARGUMENT, AQUI DEIXAMOS UM ARGUMENT VAZIO...
        /////TERCEIRO PARÂMETRO DE '.subscribe()', é usado quando OCORRE O EMIT DE UMA DATA PACKET DE 'observer.complete()" POR NOSSO OBSERVABLE....
        
        console.log('COMPLETED -- "completed" data package emitted by observable. Observable data emissions stopped/killed.')
    }

    )





    '''',












    EM VEZ DE 




    TER UMA ESTRUTURA TIPo 











OBSERVABLE  <--- subscription --->  OBSERVER,














VOCÊ PODE USAR 


'built-in OPERATORS'







__ENTRE__ 




SEU OBSERVABLE 


e o 

subscription/observer,


TIPO ASSIM:








OBSERVABLE --- OPERATOR/operators  <--- subscription --->  OBSERVER,
















--------- ISSO SIGNIFICA QUE 



ESSES 'DATA POINTS' emitidos pelo OBSERVABLE 



_VÃO PRIMEIRAMENTE 



ALCANÇAR __ ESSES 'OPERATORS',


que vão FAZER ALGO COM A DATA,







E ESSE 'ALGO' 
PODE SER  

__QUALQUER COISA 

IMAGINÁVEL,



EXISTEM DEZENAS E DEZENAS DE OPERATORS built-in....










-> E AÍ,


FEITA ESSA TRANSFORMAÇÃO,

VOCÊ FAZ SUBSCRIBE AO 

'RESULTADO'


DESSES OPERATORS...















--> O PROFESSOR QUER NOS MOSTRAR UM EXEMPLO CONCRETO QUE VAI DEIXAR ISSO MAIS CLARO:














--> DIGAMOS QUE AQUI, NO NOSSO APP,



NA PAGE DE 'home',


TEMOS ESTE CÓDIGO:












import { Component, OnDestroy, OnInit } from '@angular/core';

import 
{ 
    // interval,  vamos REPLICAR O CONTEÚDO DESSE 'observable' built-in... mas com nossas PRÓPRIAS MÃOS..

    Observable,   Observer,   ////isto é usado PARA CRIAR CUSTOM OBSERVABLES, para que nós consigamos criar nossos próprios observables...
    Subscription } from 'rxjs';


@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css'],
})
export class HomeComponent implements OnInit, OnDestroy {
  customObservable: Subscription;

  constructor() {}

  ngOnInit(): void {


    ///será nosso CUSTOM OBSERVABLE, que criamos por conta própria, e que replica o comportamento do built-in observable/function de 'interval()'..
    //NESSA CONST É _ CRIADA A NOSSA 'OBSERVABLE'...
    const customIntervalObservable = new Observable(
        (observer) => {

            //tudo isso faz parte da LÓGICA de nossA OBSERVABLE ( o objetivo é fazer com que um 'event' desse 'interval' seja emitido A CADA SEGUNDO, por meio de 'setInterval()')....
            let count = 0;  ////pq esse é o VALUE que vamos querer que seja EMITIDO GRADUALMENTE (de 1 em 1 segundo, de acordo com aquele 'count++')..
            setInterval(
                () => {


                  observer.next(count);
                  //observer.error();  ///usado quando você quer 'EMIT A DATA PACKAGE' de error, dizendo que algo deu errado.... seu observable vai emitir essa info...
                  //observer.complete();  ///usado quando você quer 'emit uma data package que diz que vocÊ ACABOU COM ESSE OBSERVABLE', o observable acabou sua tarefa (ex: http request, quando o tópico é o 'receive da response')...





                  if (count == 2) {
                    observer.complete();  ///QUANDO VOCÊ CHAMA 'observer.complete()', O _ _OBSERVABLE __ VAI REALMENTE 'PARAR'... --> não alcançaremos 'observer.error()', por exmeplo, nesse exemplo aqui....
                  }




              



                    if (count > 3) {
                      observer.error(new Error('Count is greater than 3!')); ////// quando um ERROR é emitido por um OBSERVABLE, o observable 'MORRE', ele PARA__ DE EMITIR_ as próprias data packages.... --> isso significa que NÃO PRECISAMOS MAIS DAR 'UNSUBSCRIBE' nesse observable, pq ele  já terá cometido 'suicídio' por meio do emit do error....
                  }


                },
                1000 ///depois de 1 SEGUNDO INTEIRO vamos querer FAZER _ EMIT _ DO VALUE _ de nosso observable, que é aquele 'count' em 'observer.next(count)'...
            )

            count++;
        },
    );    



  

    customIntervalObservable.subscribe(
        (count) => { //será um NUMBER...  ////// O PRIMEIRO PARÂMETRO DE '.subscribe()' (nossa subscription) é '''A LÓGICA QUE EXECUTAMOS SE FOR RECEBIDA UMA DATA PACKAGE COMUM, VINDA DE NOSSO OBSERVABLE''''...

            console.log(count);
            console.log('DATA --  data package emitted by observable. We can run some logic for EACH data packet that is emitted.')
        },
        (error) => {  //O SEGUNDO PARÂMETRO DE '.subscribe()' (nossa subscription) é '''A LÓGICA QUE EXECUTAMOS SE FOR RECEBIDA UMA DATA PACKAGE __DE ERRO___ (que interrompe o emit de data da observable), VINDA DE NOSSO OBSERVABLE''''...
          console.log(error);
          console.log('ERROR -- "ERROR" data package emitted by observable. Observable data emissions stopped.')
      },
      () => {   /////COMO O 'observer.complete()' NÃO NOS PASSA NENHUM ARGUMENT, AQUI DEIXAMOS UM ARGUMENT VAZIO...
        /////TERCEIRO PARÂMETRO DE '.subscribe()', é usado quando OCORRE O EMIT DE UMA DATA PACKET DE 'observer.complete()" POR NOSSO OBSERVABLE....
        
        console.log('COMPLETED -- "completed" data package emitted by observable. Observable data emissions stopped/killed.')
    }

    )
    

  }

  ngOnDestroy(): void {    /////SE VAMOS CRIAR UM 'OBSERVABLE', temos que saber COMO _ CANCELAR UMA DE NOSSAS 'SUBSCRIPTIONS' a nosso observable custom.... ---> é assim que podemos fazer; armazenamos essa subscription em uma propriedade, aí mais tarde, nesse hook de 'NgOnDestroy()', FAZEMOS UNSUBSCRIBE nessa subscription específica (pq o 'ngOnDestroy' é executado quando TROCAMOS DE PAGE, QUANDO NOSSO PAGE-COMPONENT É DESTRUÍDO, ESSENCIALMENTE)...
    
    this.customObservable.unsubscribe();
  }
}




























-> por meio daquele 



observable de 'interval',


recebemos 



nossos values 


'1, 2, 3, 4, 5'...
















--> AÍ,



POR MEIO DESSE COUNT,




quando chegamos em '3' recebemos um error, conforme escrevemos anterioremnte...






----> ok,






MAS DIGAMOS QUE __ NÃO TEMOS INTERESSE NESSES VALUES,


MAS QUE 



QUEREMOS _ TER ALGUM 

TEXT
 
 QUE 

 DIZ 





'
round 1',



'round 2 ',



'round 3',



etc etc...







----> OU SEJA,


QUEREMOS 

MANIPULAR ESSE VALUE E ADICIONAR A STRING DE 

'round ' 




NA FRENTE DELE....













----------> OBVIAMENTE,

O QUE PODERÍAMOS FAZER,




LÁ NO NOSSO SUBSCRIBE,

É isto:







    customIntervalObservable.subscribe(
        (count) => {
            console.log('Round: ' + count + 1);
            console.log('DATA --  data package emitted by observable. We can run some logic for EACH data packet that is emitted.')
        },
        (error) => { 
          console.log(error);
          console.log('ERROR -- "ERROR" data package emitted by observable. Observable data emissions stopped.')
      },
      () => { 

        console.log('COMPLETED -- "completed" data package emitted by observable. Observable data emissions stopped/killed.')
    }

    )







    ------------------------------------------









        console.log('Round: ' + count + 1);
















        ---> CERTO... E NÃO HÁ NADA DE ERRADO COM ISSO...















        --> PARA TRANSFORMATIONS SIMPLES COMO ESSA AÍ,


        de só adicionar uma string e uma unidade,




        é ok fazer assim..










        ---> MAS 




        QUÃO MAIS COMPLEXA SUA LÓGICA FICA,



        MAIS NICE SERIA 




        NÃO _ TER DE SE IMPORTAR 




        COM 



        ESSAS TRANSFORMAÇÕES 


        NESSE LOCAL AÍ,



        NESSE LOCAL 



        EM QUE 

        FAZEMOS 

        'subscribe',







        E SIM EM UM _ LUGAR_ 



        BEM MAIS 


        'early'... 












        ------> QUEREMOS _ MUDAR A FORMA PELA QUAL O FORMATO DESSA DATA DA OBSERVABLE _ 



        CHEGA__ NO NOSSO 'SUBSCRIBE/subscription'...










        --> É CLARO QUE PODERÍAMOS FAZER ISSO 


        TAMBÉM 


        NO LOCAL EM QUE __ CRÍAMOS O NOSSO OBSERVABLE,








        mas aí surge o problema:






        '''''E SE VOCê NÃO __ OWNA 

        ESSE OBSERVABLE, E SE VOCÊ NÃO FOI O CARA QUE O CRIOU?''''







        --> E SE VOCÊ QUISESSE MUDAR 







        O 'params' 




        visto em 



        'this.route.PARAMS.subscribe()' ?






AÍ SERIA IMPOSSÍVEL,

PQ _ VOCÊ SERIA FORÇADO A EDITAR O CÓDIGO ORIGINAL,



E VOCÊ NÃO PODE FAZER ISSO...











----> é NESSE MOMENTO QUE 'OPERATORS' SE TORNAM IMPORTANTES,



PQ VOCê PODE FAZER COISAS COMO 'alterar o value entregue por observables como 'PARAMS' ' 



ANTES DE ELES 


EFETIVAMENTE ALCANÇAREM A PARTE 

'.subscribe()"


do seu código...












-------> E VOCÊ PODE USAR 


'operators'


EM QUALQUER OBSERVABLE,




COMO EM NOSSO 

'customIntervalObservable',






__ 



basta
 


 USAR 

 O METHOD QUE É CHAMADO DE '.pipe()'



 NELE...











 --> TIPO ASSIM:











 import { Component, OnDestroy, OnInit } from '@angular/core';

import { Observable, Observer, Subscription } from 'rxjs';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css'],
})
export class HomeComponent implements OnInit, OnDestroy {
  customObservable: Subscription;

  constructor() {}

  ngOnInit(): void {
    const customIntervalObservable = new Observable((observer) => {
      let count = 0;
      setInterval(() => {
        observer.next(count);

        if (count == 2) {
          observer.complete();
        }

        if (count > 3) {
          observer.error(new Error('Count is greater than 3!'));
        }
      }, 1000);

      count++;
    });


    customIntervalObservable.pipe();  //////esse é um OPERATOR, É USADO PARA _ TRANSFORMAR A DATA QUE RECEBEMOS LÁ DE NOSSOS 'observables'....

    customIntervalObservable.subscribe(
      (count) => {
        console.log(count);
        console.log(
          'DATA --  data package emitted by observable. We can run some logic for EACH data packet that is emitted.'
        );
      },
      (error) => {
        console.log(error);
        console.log(
          'ERROR -- "ERROR" data package emitted by observable. Observable data emissions stopped.'
        );
      },
      () => {
        console.log(
          'COMPLETED -- "completed" data package emitted by observable. Observable data emissions stopped/killed.'
        );
      }
    );
  }

  ngOnDestroy(): void {
    this.customObservable.unsubscribe();
  }
}














-------------------------------------------








bem, e CADA OBSERVABLE 

POSSUI ESSE METHOD DE 'pipe()',




PQ 

ESSE METHOD DE 'pipe()'



É BUILT-IN 


NO 

RXJS...














------>  PARA CONSEGUIR ALGUNS EXEMPLOS DE 'OPERATORS'



QUE VOCÊ PODE USAR COm '.pipe()",










VOCê DEVE 


ESCREVER 






import { ... } from 'rxjs/operators'

















--> UM DOS OPERATORS MAIS UTILIZADOS É 'map',







QUE E´MT FAMOSO....















--> PROFESSOR FALA DO CURSO DE 'rxJs',

QUE USA UMA SINTAXE MAIS VELHA... --> rxjs 6.0..















--> ok, temos esse method de 'pipe'..








--> E ESTAMOS IMPORTANDO ESSE 'map',


esse operator aí...









-----> PARA USAR O 'MAP',


devemos chamá-lo COMO UMA _ FUNCTION,


DENTRO DO METHOD DE '.pipe()"...











--> TIPO ASSIM:










customIntervalObservable.pipe(map())







-------------------------------

















--> O MAP,

POR SUA VEZ,



ACEITA/EXIGE UMA FUNCTION COMO ARGUMENTO...








--> UMA ANON FUNCTION..








--> ESSA FUNCTION, POR SUA VEZ,


ACEITA/EXIGE UM ARGUMENTO,



QUE É 

 

 A 

 'DATA'


 QUE 



 VOCÊ 



 RECEBE/RECEBERIA INICIALMENTE 


 A PARTIR DE SUA 

 'OBSERVABLE.'...





 ex:









 customIntervalObservable.pipe(map(
     (data) => {

     }
 ))









-------------------------










    customIntervalObservable.pipe(map( //////esse é um OPERATOR, É USADO PARA _ TRANSFORMAR A DATA QUE RECEBEMOS LÁ DE NOSSOS 'observables'....

    (data) => {    ////'data' é a DATA QUE RECEBEMOS, INICIALMENTE, POR PARTE DE NOSSO OBSERVABLE, e que vamos TRANSFORMAR por meio desse nosso 'operator', que nesse caso é 'map'...

    }
 
    ));  

















------> CERTO...








E COM ESSE 'map',


PODEMOS __ RETORNAR __ 

'NEW DATA',



DATA QUE 

VAI INCORPORAR 

A 



DATA 




EMITIDA PELO 'OBSERVABLE',


mas que vai a manipular antes de a entregar 

ao 

'subscription/subscribe'...








FAZEMOS RETURN COM 'return'...












FAZEMOS ASSIM:







    customIntervalObservable.pipe(map( 
    (data) => { 

      return `Round:  ${data}`
    }
 
    ));  















    --> COM ISSO,

    RETORNAMOS UMA STRING 





    DE 

    'Round  valorDinamico'....







--> sendo o valorDinamico 

o 


'interval' que vai sendo emitido por nosso observable...












--> CERTO...








MAS SE TENTARMOS USAR ESSE OPERATOR NO NOSSO PROJECT,


AINDA VEREMOS O OUTPUT ANTIGO....








--> a razáo para isso  




é que 


esse uso de 'pipe' com 'map',

esse nosso 

USO 



DE UM OPERATOR,













___ ELE __ SÓ VAI _ FUNCIONAR__ 



SE NÓS 



___ACTUALLY__ 





SUBSTITUIRMOS 



A 'CONCRETE OBSERVABLE',




referenciada 



como 'customIntervalObservable'




em 


'customIntervalObservable.subscribe()'


,












PELA ESCRITA DE NOSSA 'observable' + O OPERATOR ACOPLADO A ELA,

TIPO ASSIM:











    customIntervalObservable.pipe(map((data) => { return `Round: ${data}`})).subscribe(  //////////OBSERVER (COM UM OPERATOR ACOPLADO A SI)
    (count) => {
      console.log(count);
      console.log(
        'DATA --  data package emitted by observable. We can run some logic for EACH data packet that is emitted.'
      );
    },
    (error) => {
      console.log(error);
      console.log(
        'ERROR -- "ERROR" data package emitted by observable. Observable data emissions stopped.'
      );
    },
    () => {
      console.log(
        'COMPLETED -- "completed" data package emitted by observable. Observable data emissions stopped/killed.'
      );
    }
  );



















  ---------------------------------









SÓ ASSIM CONSEGUIMOS MAPPEAR A DATA RECEBIDA LÁ DE NOSSO 'observable'



com esse operator aí..









no final, o código completo fica assim:




 this.firstObsSubscription = customIntervalObservable.pipe(map((data) => { return `Round: ${data}`})).subscribe(  //////////OBSERVER (COM UM OPERATOR ACOPLADO A SI)
    (count) => {
      console.log(count);
      console.log(
        'DATA --  data package emitted by observable. We can run some logic for EACH data packet that is emitted.'
      );
    },
    (error) => {
      console.log(error);
      console.log(
        'ERROR -- "ERROR" data package emitted by observable. Observable data emissions stopped.'
      );
    },
    () => {
      console.log(
        'COMPLETED -- "completed" data package emitted by observable. Observable data emissions stopped/killed.'
      );
    }
  );



---------------------------------






ok, se salvamos tudo isso,

observamos o output 




de 




'round: 1',


'round: 2'..









=---> É CLARO QUE 





ESSES OPERATORS SÃO MAIS ÚTEIS QUANDO VOCÊ QUER TRANSFORMAR 

A 


DATA 




VINDA DE UM WEBSERVER,




e aí você quer transformar essa data antes a utilizar em um component,

algo que faremos mais tarde...











--> MAS O COMPORTAMENTO/IDEIA É SEMPRE A MESMA:






1) COM PIPE,


SEMPRE VAMOS USAR 1 OU MAIS OPERATORS,



e aí 

você 

SIMPLESMENTE OS ADICIONA COMO _ ARGUMENTS_- 




NELE... (como 'map()') -------> O PIPE RECEBE UMA QUANTIDADE ILIMITADA DE 


ARGUMENTS,

E CADA ARGUMENT É UM OPERATOR 




IMPORTADO DE 


'rxjs/operator'... 










2) VOCÊ VAI IMPORTAR QUANTOS VOCÊ QUISER,


E AÍ 

ELES VÃO RODAR 1 ATRÁS DO OUTRO,

E AÍ 

REALIZAR 

OPERATIONS DIVERSAS NA SUA DATA...








3) OUTRO OPERATOR ÚTIL É 'filter'



















--> SE QUISÉSSEMOS ADICIONAR 'filter' como 




mais um dos operators usados 


em 'pipe()',

escrevemos assim:





 this.firstObsSubscription = customIntervalObservable.pipe(filter(), map((data) => { return `Round: ${data}`})).subscribe(  //////////OBSERVER (COM UM OPERATOR ACOPLADO A SI)
    (count) => {











        filter(), map(),












        ------->







        É CLARO QUE O FILTER _ TAMBÉM VAI


        'GET THE DATA',







        MAS SUA LÓGICA É DIFERENTE 




        DAQUELA ESCRITA COM 'map()'...







--> o filter EXIGE QUE RETORNEMOS 'true' ou 'false',



E ESSE RETURN DECIDE 




SE _ AQUELE 'DATA POINT' 


ESPECÍFICO 


__ VAI 

CONTINUAR 


NAQUELA CHAIN 






(

    OU SEJA,

    SE AQUELE DATA POINT VAI ATINGIR 

    O 'map()'


    e o restante dos operators e a subscription,

    ou se 


    ESSE DATA POINT VAI SER 'DROPPED'...
)











--> PODEMOS RETORNAR UMA EXPRESSÃO,

tipo 




'data > 3',



ou algo assim,

para aí 

APENAS RETORNAR OS VALUES QUE FOREM MAIORES DO QUE 3,

naquele 'count' 


de nosso observable de 'interval'....













EX:















    customIntervalObservable.pipe(
      
      filter((data: any) => {
        // return true;
        // return false; //hardcoded
         return data > 3;       //return de uma expression --> vai retornar 'TRUE' OU 'FALSE', pq esse 'data' é/será um number...


      }),

      
      
      map((filteredData) => { return `Round: ${filteredData}`})).subscribe(  //////////OBSERVER (COM UM OPERATOR ACOPLADO A SI)
    (count) => {
      console.log(count);
      console.log(
        'DATA --  data package emitted by observable. We can run some logic for EACH data packet that is emitted.'
      );
    },
    (error) => {
      console.log(error);
      console.log(
        'ERROR -- "ERROR" data package emitted by observable. Observable data emissions stopped.'
      );
    },
    () => {
      console.log(
        'COMPLETED -- "completed" data package emitted by observable. Observable data emissions stopped/killed.'
      );
    }
  );


















--> CERTO..


ISSO REALMENTE FILTRA NOSSOS COUNTS '0, 1 E 2'...









--> OK, ISSO NOS MOSTRA 




O PODER DOS OPERATORS,

QUE 



ELES NOS DEIXAM 

CONSTRUIR UMA 'CHAIN OF STEPS'

pelas quais podemos funnelar nossa data... ---->  







ASSIM CONSEGUIMOS MANIPULAR 


A DATA QUE 


RECEBEMOS DE WEBSERVERS, de webservers e emitidos por 'observables'...










--> os operators, portanto, são mt úteis quando o assunto é o transform de data,



PODEMOS USAR 


ELES COMO UMA PIPELINE 

_ EM DIREÇÃO AO NOSSO SUBSCRIBE,

que vai receber 


a data toda filtrada,

manipulada
,

mappeada,


etc...