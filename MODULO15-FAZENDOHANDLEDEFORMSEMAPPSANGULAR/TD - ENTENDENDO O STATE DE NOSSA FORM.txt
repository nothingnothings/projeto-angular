














-----> OK... NA ÚLTIMA AULA APRENDEMOS SOBRE COMO PODEMOS 'SUBMIT' UMA FORM 


CRIADA PELO ANGULAR...









--> os passos são esses:







1) COLOQUE 'ngModel' e 'name=qualquerCoisaIdentificadora' 


nos input fields/<selects> de seu TEMPLATE (html)





2) COLOQUE o código '(ngSubmit)="methodDeSuaEscolha()' lá na tag '<form>' de sua form...





3) depois, DEFINA UMA LOCAL REFERENCE, tipo '#localForm', 


e aí DEFINA SEU VALOR COMO EQUIVALENTE A 'ngForm', 
tipo assim:


#localForm="ngForm" 






4) depois, PASSE ESSA LOCALREFERENCE AO 'methodDeSuaEscolha',


tipo assim:


methodDeSuaEscolha(localForm)









5) LÁ NO SEU CÓDIGO TYPESCRIPT, VOCÊ VAI RECEBER ESSA 'REPRESENTAÇÃO JAVASCRIPT DE SUA FORM',

em um formato tipo 



methodDeSuaEscolha(form: ngForm) {



    console.log(form);

    console.log(form.values);

}





---> E SIM, O TYPE SERÁ DE 'ngForm'...















--> O CÓDIGO COMPLETO, PORTANTO, FICOU ASSIM:












import { Component } from '@angular/core';
import { NgForm } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {


  suggestedUserName() {
    const suggestedName = 'Superuser';
  }



  onSubmitForm(formReference: NgForm) {  ///aqui será passado o ACTUAL FORM element, com todos seus input fields e <selects> (os controls de sua form, essencialmente)..
    console.log(formReference);
    console.log('submitted!')


    console.log(formReference.value);
  }


}

















E ASSIM:
















<div class="container">
  <div class="row">
    <div class="col-xs-12 col-sm-10 col-md-8 col-sm-offset-1 col-md-offset-2">


      <form (ngSubmit)="onSubmitForm(formReference)" #formReference="ngForm" >  <!-- ESSA DIRECTIVE VAI CAPTURAR O 'TRIGGER DO SUBMIT' de sua form e então vai o utilizar para RODAR OS METHODS QUE VOCê DEFINIU LÁ NO ARQUIVO '.ts'..-->
        <!-- NO ANGULAR, VOCÊ NUNCA COLOCA 'action=xxx' na sua tag de FORM, pq sua form vai ser handldada PELO ANGULAR EM SI... é por isso que não temos 'action' APONTANDO A ALGUMA ROUTE DE NOSSO APP.. NÓS TAMBÉM NÃO VAMOS COLOCAR 'method=POST', esse outro attribute famoso...-->

        <!-- VOCÊ TAMBÉM PRECISA DEFINIR O VALOR DE SUA LOCAL REFERENCE COMO EQUIVALENTE A 'ngForm', para CONSEGUIR PASSAR A _ ACTUAL_ REPRESENTAÇÃO JAVASCRIPT DE SUA FORM AO seu method em 'xxx.ts', ao código typescript-->
        <div id="user-data">
          <div class="form-group">
            <label for="username">Username</label>
            <input
              type="text"
              id="username"
              class="form-control"
              ngModel 
              name="username" 
            />
          </div>
          <button class="btn btn-default" type="button">
            Suggest an Username
          </button>
          <div class="form-group">
            <label for="email">Mail</label>
            <input
              type="email"
              id="email"
              class="form-control"
              ngModel 
              name="email" 
            />
            <!-- o angular vai RECONHECER ESSE INPUT FIELD como um dos 'CONTROLS' da REPRESENTAÇAÕ TYPÉSCRIPT DA FORM SE VOCê ADICIONAR 'ngModel' como directive-->
            <!-- VOCÊ TAMBÉM PRECISA DE 'name', essa directive/attribute que vai dizer ao ANGULAR __ como _ deverá ser o nome desse control/input na REPRESENTAÇÃO TYPESCRIPT DESSA FORM.. .-->
          </div>
          <div class="form-group">
            <label for="secret">Secret Questions</label>
            <select id="secret" 
            class="form-control" 
            name="secret" 
            ngModel>
              <option value="pet">Your first Pet?</option>
              <option value="teacher">Your first teacher?</option>
            </select>
          </div>
          <button class="btn btn-primary">Submit</button>
        </div>
      </form>
    </div>
  </div>
</div>
























------> ok, isso quer dizer que APRENDEMOS A ACESSAR NOSSAS FORMS...







--> APRENDEMOS A ACESSAR ESSE OBJECT JAVASCRIPT REPRESENTATIVO DE NOSSA FORM,

lá no código typescript....









--> BEM,

E AÍ NÓS 


TAMBÉM 




ESTUDAMOS A PROPRIEDADE DE 'form.values',



QUE VAI 


ARMAZENAR 

O INPUT DO USER EM VÁRIOS 'key-value pairs',

QUE VÃO REPRESENTAR TODOS OS ELEMENTS/INPUTS/selects



EM QUE 
VOCÊ 

COLOCOU 

aquela directive de 'ngModel' com um name válido..









--> NÓS TAMBÉM __ CONSTATAMOS QUE NAQUELE OBJECT TÍNHAMOS UM ___ MONTE__ DE OUTRAS PROPERTIES,




DEZENAS DE PROPERTIES COMO:









subbmited: true 
control:
controls:
dirty:
disabled:
enabled:
errors:
form:
formDirective:
invalid
ngSubmit
path:
pending:
pristine:
statusChanges:
submitted:
touched:
untouched:
valid:
value:
















--> E ISSO É ALGO LEGAL SOBRE O FORM HANDLING DO ANGULAR,





ELE TE DEIXA REALMENTE _ ENTENDER_ A FUNDO O STATE DE NOSSA FORM....








--> ELE NOS DEIXA VER QUAIS 

'CONTROLS' 

REGISTRAMOS AQUI,




se acessarmos 


'form.controls':










OBSEVAMOS:




'email: FormControl
secret: FormControl 
username: FormControl 
'










--> E CADA CONTROL É DE TIPO 'FormControl',



UM TYPE FORNECIDO PELO ANGULAR,

EM QUE 

CADA CONTROL,

POR SUA VEZ,



TEM UM MONTE DE PROPERTIES TAMBÉM.... (


muitas são iguais àquelas 


que temos na 'overall form',


mas algumas 

SÃO 

EXCLUSIVAS,

como 


'root'...

)










-----------> NA OVERALL FORM,


TEMOS VÁRIAS PROPERTIES,



COMO 

'dirty',


'disabled',



'enabled',


'errors'...











--> A MAIOR PARTE DAS 

PROPERTIES É SELF-EXPLANATORY..







--> 'dirty' está como true PQ _ ALTERAMOS ALGO DA FORM...







-> SE RECARREGARMOS A PAGE E SUBMITTARMOS SEM 

TYPAR QUALQUER COISA,


DIRTY ESTARÁ COMO 'false'....






--> JÁ 'disabled'

FICA true 

SE A FORM 

FICAR _ DESABILITADA, POR ALGUMA RAZÃO...











--> 'invalid' --> é FALSE pq __ 
NÃO ATIVAMOS 

NENHUMA VALIDATION 

NO NOSSO PROJECT,

ATÉ AGORA...










--> TAMBÉM TEMOS A PROPRIEDADE DE 'valid,'

lá para baixo,


que indica 'true' (pq estamos sem validation)....









--> MAIS TARDE ADICIONAREMOS VALIDATORS,




PARA ASSEGURAR QUE UM 'VALID E-MAIL ADDRESS'

tenha de ser 


inputtado 





para que 


o negócio seja aceito..









--> NÓS TAMBÉM TEMOS 'touched',


QUE É USADO PARA VER SE JÁ CLICAMOS EM ALGUM DOS FIELDS...








---> A DIFERENÇA DE DIRTY PARA 'touched' ------> 





COM 'DIRTY',

TEMOS QUE _ ACTUALLY_ 


ALTERAR 

ALGO 

DENTRO DO FIELD, para que ele fique como 'true'...









-> já para 'touched',

PRECISAMOS _ ACTUALLY_ CLICAR_ NO INPUT FIELD_  
para 
torná-lo 'touched'...













--> DEPOIS APRENDEREMOS SOBRE COMO ESSAS PROPERTIES PODEM SER ÚTEIS NO CHANGE 


DA USER EXPERIENCE --> TIPO 



_DESABILITAR O BUTTON DE 'SUBMIT'


se a form
não estiver como 'valid'...










----> É IMPORTANTE ENTENDEWR QUE TEMOS TODAS ESSAS PROPERTIES..







-> ENTENDER QUAIS PROPERTIES TEMOS,


COMO ELAS MUDAM,

QUAIS PROPERTIES OS INDIVIDUAL CONTROLS POSSUEM,

ETC...