









----> NAS ÚLTIMAS LIÇÕES,



APRENDEMOS SOBRE COMO PODEMOS 

'REGISTER CONTROLS'








NO ANGULAR,


E COMO PODEMOS FAZER SUBMIT DA FORM...










O CÓDIGO FICOU ASSIM:
















import { Component } from '@angular/core';
import { NgForm } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {


  suggestedUserName() {
    const suggestedName = 'Superuser';
  }



  onSubmitForm(formReference: NgForm) {  ///aqui será passado o ACTUAL FORM element, com todos seus input fields e <selects> (os controls de sua form, essencialmente)..
    console.log(formReference);
    console.log('submitted!')

    console.log('ISDIRTY?', formReference.dirty);

    console.log(formReference.value);
    console.log('ISVALID?', formReference.valid);
    console.log('ISTOUCHED?', formReference.touched)
  }


}













E ASSIm:




















<div class="container">
  <div class="row">
    <div class="col-xs-12 col-sm-10 col-md-8 col-sm-offset-1 col-md-offset-2">


      <form (ngSubmit)="onSubmitForm(formReference)" #formReference="ngForm" >  <!-- ESSA DIRECTIVE VAI CAPTURAR O 'TRIGGER DO SUBMIT' de sua form e então vai o utilizar para RODAR OS METHODS QUE VOCê DEFINIU LÁ NO ARQUIVO '.ts'..-->
        <!-- NO ANGULAR, VOCÊ NUNCA COLOCA 'action=xxx' na sua tag de FORM, pq sua form vai ser handldada PELO ANGULAR EM SI... é por isso que não temos 'action' APONTANDO A ALGUMA ROUTE DE NOSSO APP.. NÓS TAMBÉM NÃO VAMOS COLOCAR 'method=POST', esse outro attribute famoso...-->

        <!-- VOCÊ TAMBÉM PRECISA DEFINIR O VALOR DE SUA LOCAL REFERENCE COMO EQUIVALENTE A 'ngForm', para CONSEGUIR PASSAR A _ ACTUAL_ REPRESENTAÇÃO JAVASCRIPT DE SUA FORM AO seu method em 'xxx.ts', ao código typescript-->
        <div id="user-data">
          <div class="form-group">
            <label for="username">Username</label>
            <input
              type="text"
              id="username"
              class="form-control"
              ngModel 
              name="username" 
            />
          </div>
          <button class="btn btn-default" type="button">
            Suggest an Username
          </button>
          <div class="form-group">
            <label for="email">Mail</label>
            <input
              type="email"
              id="email"
              class="form-control"
              ngModel 
              name="email" 
            />
            <!-- o angular vai RECONHECER ESSE INPUT FIELD como um dos 'CONTROLS' da REPRESENTAÇAÕ TYPÉSCRIPT DA FORM SE VOCê ADICIONAR 'ngModel' como directive-->
            <!-- VOCÊ TAMBÉM PRECISA DE 'name', essa directive/attribute que vai dizer ao ANGULAR __ como _ deverá ser o nome desse control/input na REPRESENTAÇÃO TYPESCRIPT DESSA FORM.. .-->
          </div>
          <div class="form-group">
            <label for="secret">Secret Questions</label>
            <select id="secret" 
            class="form-control" 
            name="secret" 
            ngModel>
              <option value="pet">Your first Pet?</option>
              <option value="teacher">Your first teacher?</option>
            </select>
          </div>
          <button class="btn btn-primary">Submit</button>
        </div>
      </form>
    </div>
  </div>
</div>



















--> também aprendemos sobre QUAIS PROPERTIES NOSSA FORM POSSUI...












--> AGORA,


NO MOMENTO,





NÓS FAZEMOS 'SUBMIT' DA FORM, COM TODOS OS VALUES QUE O USER INPUTTOU E OS VALUES DE SUAS PROPRIEDADES,



por meio 



do 



PASS DA FORM 




lá NO TEMPLATE,

LÁ EM 



'(ngSubmit)=onSubmit(referenciaAForm)'

















TIPO ASSIM:




      <form (ngSubmit)="onSubmitForm(formReference)" #formReference="ngForm" > 
      <...>
      </form>



      







      -----------------------------








      OK.... é claro que aqui tivemos de seguir vários passos,













  --> a form aqui foi obtida por meio do vínculo de '#formReference',
   essa local reference aí,

   ao value de 


   'ngForm'...





   -> AÍ PASSAMOS ISSO AO NOSSO METHOD DE 'onSubmitForm()'  



   (QUE FOI CRIADO LÁ EM 'app.component.ts')..










   --> ISSO É 


   ABSOLUTELY FINE,



   E TAMBÉM O APPROACH QUE VOCê 


   EMPREGARÁ 

   NA GRANDE MAIORIA DOS CASOS...










   --> MAS O PROFESSOR QUER NOS MOSTRAR UM OUTRO APPROACH,



   UM APPROACH ALTERNATIVO...




   








   --> VOCÊ DEVE SE LEMBRAR 


   DO MÓDULO DOS COMPONENTS, NESSE CURSO,



   EM QUE 



   _ NÓS APRENDEMOS SOBRE 



   '@ViewChild()',




QUE ERA UM DECORATOR QUE NOS DEIXAVA




essencialmente



ACESSAR UMA LOCAL  REFERENCE 

QUE 


UM 


__ _ELEMENT CONTROLAVA,










OU ''''UM ELEMENT QUE SEGURAVA UMA LOCAL REFERENCE'''...








--> ISSO DEIXAVA ACESSAR ESSE ELEMENT AÍ, qualquer um que o fosse,



_ DE DENTRO __ DO NOSSO CÓDIGO TYPESCRIPT...













-> BEM, NO FINAL DAS CONTAS, 


NÓS _ JÁ TEMOS UMA 'LOCAL REFERENCE'

DESSAS,


no nosso código html:






   <form (ngSubmit)="onSubmitForm(formReference)" #formReference="ngForm" > 













   --> como vocÊ já pode ver,






   já temos aquele 


   'formReference' ALI...












   -_> E EMBORA ISSO AÍ NÃO APONTE 

   A 
   UM 



'ELEMENTREF' (como '<ng-template>', em que sempre colocávamos/colocamos essas local references ),





E SIM 


APONTE A UM 'ngForm' object, 














ISSO NAÕ DEIXA DE SER UMA __ LOCAL REFERENCE __ NO NOSSO TEMPLATE,





O QUE SIGNIFICA QUE 
PODEMOS SIMPLESMENTE 


CHAMAR 


'@ViewChild()'






NO NOSSO CÓDIGO TYPESCRIPT...










-> BASTA COMENTAR PARA FORA O NOSSO METHOD DE ANTES,

e aí escrever assim:
















COMEÇAMOS ASSIM:










import { Component, ViewChild } from "@angular/core";

import { NgForm } from "@angular/forms";



@Component(
    {
        selector: 'app-root',
        templateUrl: './app.component.html',
        styleUrls: ['./app.component.css']
    }
)



export class AppComponent {


    @ViewChild('formReference') formReference: NgForm;





}










-----------------------------------------------------














E, SIM, O TYPE DESSA REFERENCIA AO 
ELEMENTO 

'form'

SERÁ/TERÁ O TYPE DE 'NgForm' 

TAMBÉM...















--> CERTO.... AÍ, A PARTIR 

DESSE 'viewChild',



A PARTIR 
DESSE VIEW CHILD QUE ENGLOBA NOSSO ELEMENT, QUE AGORA ESTÁ ARMAZENADO NESSA PROPRIEDADE 


de 

'formReference',



podemos SIMPLESMENTE ESCREVER  NOSSO METHOD 'onSubmitForm()' ASSIM:






















import { Component, ViewChild } from "@angular/core";

import { NgForm } from "@angular/forms";



@Component(
    {
        selector: 'app-root',
        templateUrl: './app.component.html',
        styleUrls: ['./app.component.css']
    }
)



export class AppComponent {


    @ViewChild('formReference') formReference: NgForm;




    onSubmitForm() { //////////EIS O CÓDIGO EM QUESTÃO.
        
          console.log(this.formReference);

          console.log(this.formReference.value);


    }





}












E O CÓDIGO HTML, É CLARO,


FICA TIPO ASSIM:






<form (ngSubmit)="onSubmitForm()" #formReference="ngForm"> 








(
  tiramos 

  '(formReference)' ALI EM 'onSubmitForm',


MAS 

DEIXAMOS 


aquele value de 'ngForm' em '#formReference'...
)












--> E __ É ÓBVIO QUE ISSO AÍ AINDA VAI FUNCIONAR...











-> se apertarmos no button de 'submit',

AINDA VAMOS RECEBER A MESMA 




FORM DE ANTES,


sem problemas....
















--> OU SEJA,


RECEBEMOS A MESMA FORM DE ANTES,

MAS AGORA 



SEM 


SERMOS FORÇADOS 

A PASSAR AQUELA reference 

de 

'#formReference="ngForm" '



ao 


method 

QUE ESCREVEMOS E VINCULAMOS A 

'(ngSubmit)'  (como 'onSubmitForm()', nosso method que escrevemos em 'app.component.ts')...







 

---> MAS QUANDO ISSO É ÚTIL?











ISSO É ESPECIALMENTE ÚTIL QUANDO VOCÊ PRECISA ACESSAR A FORM






_ NÃO _ NO PONTO __ NO TEMPO EM QUE 

VOCê ACTUALLY _ A SUBMITTA,


MAS SIM 


___________aNTES___ dE A SUBMITTAR___... 







(
  ou seja,

  em um momento ANTERIOR A UM CLICK EM UM BUTTON EM QUE VOCÊ DISPARA UM METHOD,

  em outras palavras...
)









-> O PROFESSOR MOSTRARÁ UM USE CASE PARA ISSO EM UMA FUTURA LIÇÃO...










--> POR ENQUNATO,

VAMOS MANTER ISSO NA NOSSA MENTE,


QUE ESSA É UMA MANEIRA VÁLIDA DE 
CONSEGUIR 

ACESSO 



A NOSSA FORM,


NO CÓDIGO TYPESCRIPT...









--> ANTES DE EXAMINARMOS CASES EM QUE ISSO PODE SER ÚTIL,


DEVEMOS ACTUALLY ENTENDER COMO PODEMOS _ CONTROLAR __ A 'VALIDITY'


da form..









--> COMO DETERMINAR SE A FORM É VÁLIDA OU NÃO... ( validation) --> 

ISSO 

PQ 
ATÉ 

AGORA PODEMOS 



ENVIAR QUALQUER COISA,

PQ NÃO EXISTE VALIDATION...








--> VAMOS TIRAR VANTAGEM DAS TOOLS QUE O ANGULAR NOS OFERECE,

PARA POSSIVELMENTE MELHORAR a 

USER EXPERIENCE POR MEIO DE :




1) PLACE DE RED BORDERS AO REDOR DE INVALID ELEMENTS,



e coisas assim..


VEREMOS A VALIDATION NAS PRÓXIMAS AULAS... 