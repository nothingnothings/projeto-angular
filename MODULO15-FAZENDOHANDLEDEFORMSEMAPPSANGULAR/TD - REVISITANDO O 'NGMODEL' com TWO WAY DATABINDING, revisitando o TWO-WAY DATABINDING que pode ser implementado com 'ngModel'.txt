











CERTO... MAS àS VEZES 


VOCÊ VAI QUERER FAZER MAIS DO QUE 


'PRE-POPULATE'






OS INPUT FIELDS COM VALUES DIVERSOS,




como visto com este código aqui:








import { Component, ViewChild } from '@angular/core';
import { NgForm } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
})
export class AppComponent {

  defaultQuestion: string = 'pet';  ////'pet' para a 'option' número 1, 'teacher' para a option número 2 (propriedade 'value' em cada 'option' é o que conta)...

  defaultTextValue: string = `There was one occasion in which I wrote a very long text, it was very long and had multiple lines and...`

  suggestedUserName() {
    const suggestedName = 'Superuser';
  }


  onSubmitForm(formReference: NgForm) { ///aqui será passado o ACTUAL FORM element, com todos seus input fields e <selects> (os controls de sua form, essencialmente)..
    console.log(formReference);
    console.log('submitted!');

    console.log('ISDIRTY?', formReference.dirty);

    console.log(formReference.value);
    console.log('ISVALID?', formReference.valid);
    console.log('ISTOUCHED?', formReference.touched);
  }
}












  defaultQuestion: string = 'pet';  ////'pet' para a 'option' número 1, 'teacher' para a option número 2 (propriedade 'value' em cada 'option' é o que conta)...



















e este aqui:










<div class="container">
  <div class="row">
    <div class="col-xs-12 col-sm-10 col-md-8 col-sm-offset-1 col-md-offset-2">
      <!-- <form (ngSubmit)="onSubmitForm(formReference)" #formReference="ngForm" >  ESSA DIRECTIVE VAI CAPTURAR O 'TRIGGER DO SUBMIT' de sua form e então vai o utilizar para RODAR OS METHODS QUE VOCê DEFINIU LÁ NO ARQUIVO '.ts'.. -->
      <form (ngSubmit)="onSubmitForm(formReference)" #formReference="ngForm">
        <!-- NO ANGULAR, VOCÊ NUNCA COLOCA 'action=xxx' na sua tag de FORM, pq sua form vai ser handldada PELO ANGULAR EM SI... é por isso que não temos 'action' APONTANDO A ALGUMA ROUTE DE NOSSO APP.. NÓS TAMBÉM NÃO VAMOS COLOCAR 'method=POST', esse outro attribute famoso...-->

        <!-- VOCÊ TAMBÉM PRECISA DEFINIR O VALOR DE SUA LOCAL REFERENCE COMO EQUIVALENTE A 'ngForm', para CONSEGUIR PASSAR A _ ACTUAL_ REPRESENTAÇÃO JAVASCRIPT DE SUA FORM AO seu method em 'xxx.ts', ao código typescript-->
        <div id="user-data">
          <div class="form-group">
            <label for="username">Username</label>
            <input
              type="text"
              id="username"
              class="form-control"
              ngModel
              placeholder="Your name"
              name="username"
              required
              #nameReference="ngModel"
              minlength="5"
            />
            <span class="help-block" 
            [ngStyle]="{'color': 'red'}"
            *ngIf="!nameReference.valid && 
            
            nameReference.value">
            
            Your name must have at least 5 characters!</span>
            <!-- required É UM DEFAULT HTML ATTRIBUTE, mas quando você o escreve em código angular, É USADO COMO UM SELECTOR PARA UMA DAS DIRECTIVES BUILT-IN DO ANGULAR...-->
          </div>
          
          <button class="btn btn-default" type="button">
            Suggest an Username
          </button>
          <div class="form-group">
            <label for="email">Mail</label>
            <input
              type="email"
              id="email"
              class="form-control"
              ngModel
              name="email"
              required
              placeholder="example@test.com"
              email
              #emailReference="ngModel"
            />
            <span class="help-block" 
            [ngStyle]="{'color': 'red'}"
            *ngIf="!emailReference.valid && 
            
            emailReference.value">
            
            Please enter a valid email!</span> <!--- essa é uma maneira de RENDERIZAR CONDICIONALMENTE MENSAGENS DE ERROR/AVISO AO USER, na sua UI.... basta usar as local referenecs de seus elementos, configuradas por 'ngModel'...-->
            <!-- <p *ngIf="" [ngStyle]="{'color': 'red'}">Please enter a valid value!</p> -->
            <!-- 'EMAIL' é outra DIRECTIVE DO ANGULAR, UMA DAS 'VALIDATOR DIRECTIVES', pq é algo que assegura a validation dos inputs do user, e que NÃO É UM DEFAULT HTML ATTRIBUTE, E SIM UMA DIRECTIVE...-->
            <!-- o angular vai RECONHECER ESSE INPUT FIELD como um dos 'CONTROLS' da REPRESENTAÇAÕ TYPÉSCRIPT DA FORM SE VOCê ADICIONAR 'ngModel' como directive-->
            <!-- VOCÊ TAMBÉM PRECISA DE 'name', essa directive/attribute que vai dizer ao ANGULAR __ como _ deverá ser o nome desse control/input na REPRESENTAÇÃO TYPESCRIPT DESSA FORM.. .-->
          </div>
          <div class="form-group">
            <label for="secret">Secret Questions</label>
            <select id="secret" 
            
            class="form-control" 
            name="secret" 
            [ngModel]="defaultQuestion"
            
            >
              <option value="pet">Your first Pet?</option>
              <option value="teacher">Your first teacher?</option>
            </select>
          </div>
          <div class="form-group">
            <textarea
            class="form-control" id="exampleFormControlTextarea1" rows="3"
            [ngModel]="defaultTextValue"
            required
            type="text"
            name="textValue"
            >

            </textarea>
          </div>
          <button class="btn btn-primary" type="submit" [disabled]="!formReference.valid"> <!-- AQUI USAMOS A LOCAL REFERENEC DE '#formReference', para usar essa propriedade 'valid' de nosso object javascript de form, para aí enablar/disablar esse nosso button, dinamicamente (validation)..-->
            Submit
          </button>
        </div>
      </form>
    </div>
  </div>
</div>




















          <div class="form-group">
            <label for="secret">Secret Questions</label>
            <select id="secret" 
            
            class="form-control" 
            name="secret" 
            [ngModel]="defaultQuestion"
            
            >
              <option value="pet">Your first Pet?</option>
              <option value="teacher">Your first teacher?</option>
            </select>
          </div>
















          --> ÀS VEZES,


          VOCê 



VAI QUERER __ 


REAGIR__ INSTANTANEAMENTE 




A QUAISQUER CHANGES 

EFETUADAS PELO USER...











--> ISSO PQ, ATÉ AGORA,



TUDO 



SOBRE ESSA FORM AÍ,





TUDO MESMO,



SÓ ___ É UPDATADO 





QUANDO ACTUALLY __ 


APERTAMOS O BUTTON DE 'SUBMIT'...






-> SÓ QUANDO APERTAMOS 'SUBMIT' 



RECEBEMOS AQUELE 'FORM OBJECT',



EM QUE 

 __ PODEMOS __ RETRIEVAR __ O VALUE 


 dessa form/de cada input...










 ----> ISSO SIGNIFICA QUE 




 NO EXEMPLO ATUAL _ NÃO ESTAMOS USANDO TWO WAY BINDING...









 










 --> QUANTO AO 'ngModel',


 ELE PODE SER USADO :





 1) SEM QUALQUER BINDING (solto, só 'ngModel' em nossos elementos html de input) 








 2) OU COM 'ONE WAY BINDING'... (bind de uma propriedade como 'defaultQuestion', lá no arquivo 'app.component.ts', ao VALUE INICIAL  de nosso input element, com '[ngModel]='defaultQuestion' ) 

















 -> CERTO... MAS às VEZES VOCÊ VAI QUERER BASICAMENTE 





__CHECAR__ INSTANTANEAMENTE ALGUMA COISA,

OU ENTÃO 


__ SIMPLESMENTE_ REPETIR O QUE O USER INPUTTOU....











----> COMO EXEMPLO DISSO,


O PROFESSOR 


ADICIONA UM 




NOVO ELEMENTO,

'textarea',



QUE TERÁ UM NAME DE 'questionAnswer'...











--> TEREMOS 3 rows,


e aí 












ESCREVEMOS ASSIm:













<div class="container">
    <div class="row">
      <div class="col-xs-12 col-sm-10 col-md-8 col-sm-offset-1 col-md-offset-2">
        <!-- <form (ngSubmit)="onSubmitForm(formReference)" #formReference="ngForm" >  ESSA DIRECTIVE VAI CAPTURAR O 'TRIGGER DO SUBMIT' de sua form e então vai o utilizar para RODAR OS METHODS QUE VOCê DEFINIU LÁ NO ARQUIVO '.ts'.. -->
        <form (ngSubmit)="onSubmitForm(formReference)" #formReference="ngForm">
    
          <div id="user-data">
            <textarea
            name="questionAnswer"
            row="3"
            ngModel
            >

            </textarea>
            <button class="btn btn-primary" type="submit" [disabled]="!formReference.valid"> <!-- AQUI USAMOS A LOCAL REFERENEC DE '#formReference', para usar essa propriedade 'valid' de nosso object javascript de form, para aí enablar/disablar esse nosso button, dinamicamente (validation)..-->
              Submit
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
  














  -----> ou seja,

  COLOCAMOS 

  'ngModel'



  nessa textarea 


  APENAS PARA CONSEGUIR QUALQUER COISA QUE O USER DIGITOU, COMO INPUT,



  _ COMO _ UMA REPLY/value..










  -----> MAS TALVEZ, POR ALGUMA RAZÃO,

  VAMOS QUERER ''REPLICAR INSTANTANEAMENTE'''



  ESSA REPLY,


  ESSE 'load'/inserção 



  da data inputtada pelo user NA NOSSA PROPRIEDADE 



  DE 'questionAnswer'....








  --> PARA ISSO, VAMOS PRECISAR USAR AQUELA ANTIGA 

  MARCAÇÃO DE 



  '[(ngModel)]'....






  [(ngModel)]="questionAnswer",


  para sermos mais precisos..










  --> E A PARTIR DESSA ESCRITA NO NOSSO ELEMENTO 'textarea',



  PODEMOS _ 


  ESCREVER Um '<p>' LOGO ABAIXO,

'<p>'


QUE 

VAI OUTPUTTAR 




O VALUE DE 'questionAnswer'


AO MESMO TEMPO 

que ele é digitaod....






EX:










<div class="container">
    <div class="row">
      <div class="col-xs-12 col-sm-10 col-md-8 col-sm-offset-1 col-md-offset-2">
        <!-- <form (ngSubmit)="onSubmitForm(formReference)" #formReference="ngForm" >  ESSA DIRECTIVE VAI CAPTURAR O 'TRIGGER DO SUBMIT' de sua form e então vai o utilizar para RODAR OS METHODS QUE VOCê DEFINIU LÁ NO ARQUIVO '.ts'.. -->
        <form (ngSubmit)="onSubmitForm(formReference)" #formReference="ngForm">
    
          <div id="user-data">
            <textarea
            name="questionAnswer"
            row="3"
            ngModel
            >

            </textarea>
            <p>{{questionAnswer}}</p>
            <button class="btn btn-primary" type="submit" [disabled]="!formReference.valid"> <!-- AQUI USAMOS A LOCAL REFERENEC DE '#formReference', para usar essa propriedade 'valid' de nosso object javascript de form, para aí enablar/disablar esse nosso button, dinamicamente (validation)..-->
              Submit
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
  















O CÓDIGO FICOU TIPO ASSIM:













import { Component, ViewChild } from '@angular/core';
import { NgForm } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
})
export class AppComponent {

  defaultQuestion: string = 'pet';  ////'pet' para a 'option' número 1, 'teacher' para a option número 2 (propriedade 'value' em cada 'option' é o que conta)...

  defaultTextValue: string = `There was one occasion in which I wrote a very long text, it was very long and had multiple lines and...`


  questionAnswer: string; ///É USADO COM TWO WAY DATABINDING...


  suggestedUserName() {
    const suggestedName = 'Superuser';
  }


  onSubmitForm(formReference: NgForm) { ///aqui será passado o ACTUAL FORM element, com todos seus input fields e <selects> (os controls de sua form, essencialmente)..
    console.log(formReference);
    console.log('submitted!');

    console.log('ISDIRTY?', formReference.dirty);

    console.log(formReference.value);
    console.log('ISVALID?', formReference.valid);
    console.log('ISTOUCHED?', formReference.touched);
  }
}














E ASSIM:







<div class="container">
    <div class="row">
      <div class="col-xs-12 col-sm-10 col-md-8 col-sm-offset-1 col-md-offset-2">
        <!-- <form (ngSubmit)="onSubmitForm(formReference)" #formReference="ngForm" >  ESSA DIRECTIVE VAI CAPTURAR O 'TRIGGER DO SUBMIT' de sua form e então vai o utilizar para RODAR OS METHODS QUE VOCê DEFINIU LÁ NO ARQUIVO '.ts'.. -->
        <form (ngSubmit)="onSubmitForm(formReference)" #formReference="ngForm">
    
          <div id="user-data">
            <textarea
            name="answer"
            row="3"
            [(ngModel)]="questionAnswer"
            class="form-control"
            >

            </textarea>
            <p>{{questionAnswer}}</p>
            <button class="btn btn-primary" type="submit" [disabled]="!formReference.valid"> <!-- AQUI USAMOS A LOCAL REFERENEC DE '#formReference', para usar essa propriedade 'valid' de nosso object javascript de form, para aí enablar/disablar esse nosso button, dinamicamente (validation)..-->
              Submit
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
  







  -----------------------------











OK, ISSO QUER _ DIZEr_ QUE 


AINDA PODEMOS _ 



USAR 'TWO-WAY DATABINDING'...











--> E MESMO COM O USO DE TWO-WAY DATABINDING,


O FUNCIONAMENTO DE NOSSA FORM,


COM O 'send' 

DE TODOS NOSSOS INPUT FIELDS,  COM A VALIDATION,



VAI CONTINUAR SENDO O MESMO....














O CÓDIGO FICOU ASSIM:














<div class="container">
    <div class="row">
      <div class="col-xs-12 col-sm-10 col-md-8 col-sm-offset-1 col-md-offset-2">
        <!-- <form (ngSubmit)="onSubmitForm(formReference)" #formReference="ngForm" >  ESSA DIRECTIVE VAI CAPTURAR O 'TRIGGER DO SUBMIT' de sua form e então vai o utilizar para RODAR OS METHODS QUE VOCê DEFINIU LÁ NO ARQUIVO '.ts'.. -->
        <form (ngSubmit)="onSubmitForm(formReference)" #formReference="ngForm">
    
          <div id="user-data">
            <textarea
            name="answer"
            row="3"
            [(ngModel)]="questionAnswer"
            class="form-control"
            textAreaReference="ngModel"
            >

            </textarea>
            <p>{{questionAnswer}}</p>
            <span class="help-block" 
            [ngStyle]="{'color': 'red'}"
            *ngIf="!textAreaReference.valid && textAreaReference.value">Textarea text too short, please input more than 4 characters.</span>
            <button class="btn btn-primary" type="submit" [disabled]="!formReference.valid"> <!-- AQUI USAMOS A LOCAL REFERENEC DE '#formReference', para usar essa propriedade 'valid' de nosso object javascript de form, para aí enablar/disablar esse nosso button, dinamicamente (validation)..-->
              Submit
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
  











  E ASSIm:











  import { Component, ViewChild } from '@angular/core';
import { NgForm } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
})
export class AppComponent {

  defaultQuestion: string = 'pet';  ////'pet' para a 'option' número 1, 'teacher' para a option número 2 (propriedade 'value' em cada 'option' é o que conta)...

  defaultTextValue: string = `There was one occasion in which I wrote a very long text, it was very long and had multiple lines and...`


  questionAnswer: string = 'TWO WAY DATABINDING'; ///É USADO COM TWO WAY DATABINDING...


  suggestedUserName() {
    const suggestedName = 'Superuser';
  }


  onSubmitForm(formReference: NgForm) { ///aqui será passado o ACTUAL FORM element, com todos seus input fields e <selects> (os controls de sua form, essencialmente)..
    console.log(formReference);
    console.log('submitted!');

    console.log('ISDIRTY?', formReference.dirty);

    console.log(formReference.value);
    console.log('ISVALID?', formReference.valid);
    console.log('ISTOUCHED?', formReference.touched);
  }
}






















--------> e aquele '<p>'

ali realmente é 

renderizado CONDICIONALMENTE,


pq estamos usando 


TWO-WAY DATABINDING 



ao mesmo 

tempo que usamos o 'default value' do input, no startup da página,



e também 

a 
ADMINISTRAÇÕA 




DESSE TEXTAREA/INPUT FIELD por meio de 


'ngForm' + 'ngModel' (escrito lá nesse próprio textArea, com '[(ngModel)]')










----> BEM, E ISSO FUNCIONA,


PQ 




AGORA 





MEU OBJETO 'FORM',


quando a submitto,


fica assim:




answer: '...' (começa com 'two way  databinding', mas podemos mudar esse value)

email: '...' 

secret: '...'


textValue: '...'

username: '...'











------> LEMBRANDO NOSSO CÓDIGO HTML:





















<div class="container">
  <div class="row">
    <div class="col-xs-12 col-sm-10 col-md-8 col-sm-offset-1 col-md-offset-2">
      <!-- <form (ngSubmit)="onSubmitForm(formReference)" #formReference="ngForm" >  ESSA DIRECTIVE VAI CAPTURAR O 'TRIGGER DO SUBMIT' de sua form e então vai o utilizar para RODAR OS METHODS QUE VOCê DEFINIU LÁ NO ARQUIVO '.ts'.. -->
      <form (ngSubmit)="onSubmitForm(formReference)" #formReference="ngForm">
        <!-- NO ANGULAR, VOCÊ NUNCA COLOCA 'action=xxx' na sua tag de FORM, pq sua form vai ser handldada PELO ANGULAR EM SI... é por isso que não temos 'action' APONTANDO A ALGUMA ROUTE DE NOSSO APP.. NÓS TAMBÉM NÃO VAMOS COLOCAR 'method=POST', esse outro attribute famoso...-->

        <!-- VOCÊ TAMBÉM PRECISA DEFINIR O VALOR DE SUA LOCAL REFERENCE COMO EQUIVALENTE A 'ngForm', para CONSEGUIR PASSAR A _ ACTUAL_ REPRESENTAÇÃO JAVASCRIPT DE SUA FORM AO seu method em 'xxx.ts', ao código typescript-->
        <div id="user-data">
          <div class="form-group">
            <label for="username">Username</label>
            <input
              type="text"
              id="username"
              class="form-control"
              ngModel
              placeholder="Your name"
              name="username"
              required
              #nameReference="ngModel"
              minlength="5"
            />
            <span class="help-block" 
            [ngStyle]="{'color': 'red'}"
            *ngIf="!nameReference.valid && 
            
            nameReference.value">
            
            Your name must have at least 5 characters!</span>
            <!-- required É UM DEFAULT HTML ATTRIBUTE, mas quando você o escreve em código angular, É USADO COMO UM SELECTOR PARA UMA DAS DIRECTIVES BUILT-IN DO ANGULAR...-->
          </div>
          
          <button class="btn btn-default" type="button">
            Suggest an Username
          </button>
          <div class="form-group">
            <label for="email">Mail</label>
            <input
              type="email"
              id="email"
              class="form-control"
              ngModel
              name="email"
              required
              placeholder="example@test.com"
              email
              #emailReference="ngModel"
            />
            <span class="help-block" 
            [ngStyle]="{'color': 'red'}"
            *ngIf="!emailReference.valid && 
            
            emailReference.value">
            
            Please enter a valid email!</span> <!--- essa é uma maneira de RENDERIZAR CONDICIONALMENTE MENSAGENS DE ERROR/AVISO AO USER, na sua UI.... basta usar as local referenecs de seus elementos, configuradas por 'ngModel'...-->
            <!-- <p *ngIf="" [ngStyle]="{'color': 'red'}">Please enter a valid value!</p> -->
            <!-- 'EMAIL' é outra DIRECTIVE DO ANGULAR, UMA DAS 'VALIDATOR DIRECTIVES', pq é algo que assegura a validation dos inputs do user, e que NÃO É UM DEFAULT HTML ATTRIBUTE, E SIM UMA DIRECTIVE...-->
            <!-- o angular vai RECONHECER ESSE INPUT FIELD como um dos 'CONTROLS' da REPRESENTAÇAÕ TYPÉSCRIPT DA FORM SE VOCê ADICIONAR 'ngModel' como directive-->
            <!-- VOCÊ TAMBÉM PRECISA DE 'name', essa directive/attribute que vai dizer ao ANGULAR __ como _ deverá ser o nome desse control/input na REPRESENTAÇÃO TYPESCRIPT DESSA FORM.. .-->
          </div>
          <div class="form-group">
            <label for="secret">Secret Questions</label>
            <select id="secret" 
            
            class="form-control" 
            name="secret" 
            [ngModel]="defaultQuestion"
            
            >
              <option value="pet">Your first Pet?</option>
              <option value="teacher">Your first teacher?</option>
            </select>
          </div>
          <div class="form-group">
            <textarea
            class="form-control" id="exampleFormControlTextarea1" rows="3"
            [ngModel]="defaultTextValue"
            required
            type="text"
            name="textValue"
            >

            </textarea>
          </div>


          <textarea
          name="answer"
          row="3"
          [(ngModel)]="questionAnswer"
          class="form-control"
          required
          minlength="5"
          #textAreaReference="ngModel"
          >

          </textarea> <!-- exemplo DE TWO-WAY DATABINDING...-->
          <p>{{questionAnswer}}</p>
          <span class="help-block" 
            [ngStyle]="{'color': 'red'}"
            *ngIf="!textAreaReference.valid && textAreaReference.value"
            >Textarea text too short, please input more than 4 characters.</span>
          <button class="btn btn-primary" type="submit" [disabled]="!formReference.valid"> <!-- AQUI USAMOS A LOCAL REFERENEC DE '#formReference', para usar essa propriedade 'valid' de nosso object javascript de form, para aí enablar/disablar esse nosso button, dinamicamente (validation)..-->
            Submit
          </button>
        </div>
      </form>
    </div>
  </div>
</div>












-------------------------













-----> O VALUE de nossos input fields ainda será 

enviado normalmente/será representado no 


object' form',






MAS A ÚNICA DIFERENÇA 

É QUE 



ELES 


SERÃO 'UPDATADOS A CADA KEYSTROKE' se voc~e adicionar esse '[(ngModel)]' que incorpora o databinding..









--> MAS É CLARO QUE SE DERMOS SUBMIT,

O QUE VAMOS OBTER É UMA __ SNAPSHOT__ 

DO VALUE _DESSE INPUT FIELD NO MOMENTO EM QUE 

APERTAMOS 'submit'.. 









-> isso signifca que 



TWO-WAY BINDING AINDA É POSSÍVEL,


E UQE 
AINDA PODEMOS USAR 'ngModel'





com TWO WAY-BINDING ('[(ngModel)]' )











--> E, COM ISSO,

VOCÊ JÁ VIU AS 

3 DIFERENTES FORMAS:





1) NO-BINDIng --> <... ngModel> ----> ISSO __ APENAS_ DIZ AO ANGULAR _ QUE ESSE INPUT SERÁ UM DOS 'CONTROLS' do object 'form' que ele vai criar com 'ngForm'...








2) ONE-WAY BINDING ----->''  <...  [ngModel]="nomeDePropriedade> ''' --> ISSO FAZ COM QUE 1 VALUE DEFAULT, DEFINIDO LÁ EM UMA PROPRIEDADE DE .ts', seja __ INCORPORADA COMO O 'VALUE INICIAL' daquele input field, que vai ser pre-populated com essa data default aí...






3) TWO-WAY BINDING -> '''' <... [(ngModel)]="nomeDePropriedade">  '''  -->  É USADO PARA 'INSTANTANEAMENTE OUTPUTTAr' o value que o user digitou (com STRING INTERPOLATION), ou para fazer 'o que você quiser' com aquele value..