














-----> AGORA QUASE ACABAMOS COM O 'TEMPLATE-DRIVEN APPROACH'...









-_> vamos acabar com nossa form... 











-> NOSSO CÓDIGO ESTÁ ASSIM:

















<div class="container">
  <div class="row">
    <div class="col-xs-12 col-sm-10 col-md-8 col-sm-offset-1 col-md-offset-2">
      <!-- <form (ngSubmit)="onSubmitForm(formReference)" #formReference="ngForm" >  ESSA DIRECTIVE VAI CAPTURAR O 'TRIGGER DO SUBMIT' de sua form e então vai o utilizar para RODAR OS METHODS QUE VOCê DEFINIU LÁ NO ARQUIVO '.ts'.. -->
      <form (ngSubmit)="onSubmitForm(formReference)" #formReference="ngForm">
        <!-- NO ANGULAR, VOCÊ NUNCA COLOCA 'action=xxx' na sua tag de FORM, pq sua form vai ser handldada PELO ANGULAR EM SI... é por isso que não temos 'action' APONTANDO A ALGUMA ROUTE DE NOSSO APP.. NÓS TAMBÉM NÃO VAMOS COLOCAR 'method=POST', esse outro attribute famoso...-->

        <!-- VOCÊ TAMBÉM PRECISA DEFINIR O VALOR DE SUA LOCAL REFERENCE COMO EQUIVALENTE A 'ngForm', para CONSEGUIR PASSAR A _ ACTUAL_ REPRESENTAÇÃO JAVASCRIPT DE SUA FORM AO seu method em 'xxx.ts', ao código typescript-->
        <div id="user-data" ngModelGroup="userData" #userDataReference="ngModelGroup">  <!-- 'ngModelGroup' É UMA DIRECTIVE USADA PARA ORGANIZAR O OBJECT de 'value' dentro de 'form.value', quando é submittada a form .... isso quer dizer que VAMOS AGRUPAR múltiplos values de inputs em diferentes grupos, usando essa directive em DIVS QUE WRAPPAM NOSSOS INPUT FIELDS... , AQUI, os values dos input fields 'username' e 'email' SERÃO AGRUPADOS sob o grupo 'userData' -->
          <div class="form-group"  
          
          
          
          >
            <label for="username">Username</label>
            <input
              type="text"
              id="username"
              class="form-control"
              ngModel
              placeholder="Your name"
              name="username"
              required
              #nameReference="ngModel"
              minlength="5"
            />
            <span class="help-block" 
            [ngStyle]="{'color': 'red'}"
            *ngIf="!nameReference.valid && 
            
            nameReference.value">
            
            Your name must have at least 5 characters!</span>
            <!-- required É UM DEFAULT HTML ATTRIBUTE, mas quando você o escreve em código angular, É USADO COMO UM SELECTOR PARA UMA DAS DIRECTIVES BUILT-IN DO ANGULAR...-->
          </div>
          
          <button class="btn btn-default" type="button">
            Suggest an Username
          </button>
          <div class="form-group">
            <label for="email">Mail</label>
            <input
              type="email"
              id="email"
              class="form-control"
              ngModel
              name="email"
              required
              placeholder="example@test.com"
              email
              #emailReference="ngModel"
            />
            <span class="help-block" 
            [ngStyle]="{'color': 'red'}"
            *ngIf="!emailReference.valid && 
            
            emailReference.value">
            
            Please enter a valid email!</span> <!--- essa é uma maneira de RENDERIZAR CONDICIONALMENTE MENSAGENS DE ERROR/AVISO AO USER, na sua UI.... basta usar as local referenecs de seus elementos, configuradas por 'ngModel'...-->
            <!-- <p *ngIf="" [ngStyle]="{'color': 'red'}">Please enter a valid value!</p> -->
            <!-- 'EMAIL' é outra DIRECTIVE DO ANGULAR, UMA DAS 'VALIDATOR DIRECTIVES', pq é algo que assegura a validation dos inputs do user, e que NÃO É UM DEFAULT HTML ATTRIBUTE, E SIM UMA DIRECTIVE...-->
            <!-- o angular vai RECONHECER ESSE INPUT FIELD como um dos 'CONTROLS' da REPRESENTAÇAÕ TYPÉSCRIPT DA FORM SE VOCê ADICIONAR 'ngModel' como directive-->
            <!-- VOCÊ TAMBÉM PRECISA DE 'name', essa directive/attribute que vai dizer ao ANGULAR __ como _ deverá ser o nome desse control/input na REPRESENTAÇÃO TYPESCRIPT DESSA FORM.. .-->
          </div>
        </div>
        <p *ngIf="!userDataReference.valid && userDataReference.touched"> <!-- EXEMPLO DE USO DE UMA LOCAL REFERENCE EM UMA DIV QUE POSSUI DIRECTIVE DE 'ngFormGroup' ... -->
          There is some user data that is still invalid.
        </p>



          <div class="form-group">
            <label for="secret">Secret Questions</label>
            <select id="secret" 
            
            class="form-control" 
            name="secret" 
            [ngModel]="defaultQuestion"
            
            >
              <option value="pet">Your first Pet?</option>
              <option value="teacher">Your first teacher?</option>
            </select>
          </div>
          <div class="form-group">
            <textarea
            class="form-control" id="exampleFormControlTextarea1" rows="3"
            [ngModel]="defaultTextValue"
            required
            type="text"
            name="textValue"
            >

            </textarea>
          </div>


          <textarea
          name="answer"
          row="3"
          [(ngModel)]="questionAnswer"
          class="form-control"
          required
          minlength="5"
          #textAreaReference="ngModel"
          >

          </textarea> <!-- exemplo DE TWO-WAY DATABINDING...-->
          <p>{{questionAnswer}}</p>
          <span class="help-block" 
            [ngStyle]="{'color': 'red'}"
            *ngIf="!textAreaReference.valid && textAreaReference.value"
            >Textarea text too short, please input more than 4 characters.</span>

            <div class="radio" *ngFor="let gender of genders">
              <label>
                  <input
                  required
                  type="radio"
                  name="gender"
                  [ngModel]="exemploGender"
                  [value]="gender"
                  > <!-- 'value' é o VALUE QUE ESSE ELEMENTO DE 'RADIO button' vai segurar, e que vai render, se você o marcar... -->
                  {{gender}}
              </label>
          </div>
          
          <button class="btn btn-primary" type="submit" [disabled]="!formReference.valid"> <!-- AQUI USAMOS A LOCAL REFERENEC DE '#formReference', para usar essa propriedade 'valid' de nosso object javascript de form, para aí enablar/disablar esse nosso button, dinamicamente (validation)..-->
            Submit
          </button>
        
      </form>
    </div>
  </div>
</div>
















E ASSIM:

















import { Component, ViewChild } from '@angular/core';
import { NgForm } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
})
export class AppComponent {

  defaultQuestion: string = 'pet';  ////'pet' para a 'option' número 1, 'teacher' para a option número 2 (propriedade 'value' em cada 'option' é o que conta)...

  defaultTextValue: string = `There was one occasion in which I wrote a very long text, it was very long and had multiple lines and...`

  questionAnswer: string = 'TWO WAY DATABINDING';

  genders = ['Male', 'Female'];

  exemploGender = 'Female';  ///só um teste.


  suggestedUserName() {
    const suggestedName = 'Superuser';
  }


  onSubmitForm(formReference: NgForm) { ///aqui será passado o ACTUAL FORM element, com todos seus input fields e <selects> (os controls de sua form, essencialmente)..
    console.log(formReference);
    console.log('submitted!');

    console.log('ISDIRTY?', formReference.dirty);

    console.log(formReference.value);
    console.log('ISVALID?', formReference.valid);
    console.log('ISTOUCHED?', formReference.touched);
  }
}

















-----> 

NÓS TEMOS AQUELE 


BUTTON 
de 
'Submit',

que tem este código:







          <button class="btn btn-primary" type="submit" [disabled]="!formReference.valid"> <!-- AQUI USAMOS A LOCAL REFERENEC DE '#formReference', para usar essa propriedade 'valid' de nosso object javascript de form, para aí enablar/disablar esse nosso button, dinamicamente (validation)..-->
            Submit
          </button>
















          -> ENTRETANTO,
          ATÉ AGORA 

          SÓ USAMOS 

          ESSE 


          BUTTON PARA FAZER 'CONSOLE.LOG' DE NOSSA FORM,

          


          conforme o fluxo deste código aqui:







          1) BUTTON É CLICADO
          
          <button class="btn btn-primary" type="submit" [disabled]="!formReference.valid"> <!-- AQUI USAMOS A LOCAL REFERENEC DE '#formReference', para usar essa propriedade 'valid' de nosso object javascript de form, para aí enablar/disablar esse nosso button, dinamicamente (validation)..-->
            Submit
          </button>




        2)  EVENT DE 'submit' desse button É CAPTADO POR NOSSA FORM, que o wrappa...:




        <form (ngSubmit)="onSubmitForm(formReference)" #formReference="ngForm">

        <input>
        ...

        <button></button>






        3) esse '(ngSubmit)' FAZ COM QUE NOSSO METHOD DE 'onSubmitForm' seja disparado, lá no 'app.component.ts':





            
  onSubmitForm(formReference: NgForm) { ///aqui será passado o ACTUAL FORM element, com todos seus input fields e <selects> (os controls de sua form, essencialmente)..
    console.log(formReference);
    console.log('submitted!');

    console.log('ISDIRTY?', formReference.dirty);

    console.log(formReference.value);
    console.log('ISVALID?', formReference.valid);
    console.log('ISTOUCHED?', formReference.touched);
  }













  -----> CERTO..











  MAS AGORA VAMOS FINALMENTE __ ADICIONAR __ 


  ALGUMA COISA DE LÓGICA A ESSE METHOD...









  --> MAS ANTES DISSO,



  VAMOS ADIICONAR ALGO 

  A NOSSA FORM...











  ----> O PROFESSOR ADICIONA UM 'hr'



  E ENTAÕ 





  DECIDE 



  'SUMMARIZE' A NOSSA DATA...









  -> com este código html aqui:








  <div class="row">
    <div class="col-xs-12">
        <h3>Your Data</h3>
        <p>Username: {{}}</p>
        <p>Mail: </p>
        <p>Secret Question: </p>
        <p>Answer: </p>
        <p>Gender: </p>
</div>
</div>










CERTO.... E O PROFESSOR _ SÓ VAI QUERER 'POPULATE'



ESSES FIELDS AÍ _ 



DEPOIS _QUE NOSSA FORM TIVER SIDO 'SUBMITTED'...






-> POPULATE 



ESSES FIELDS COM A DATA DE NOSSA SUBMITTED FORM....














-> UMA MANEIRA DE FAZER ISSO


É __ DEFINIR _ UM 
STATE 

DE 

'form'


LÁ 



NO NOSSO COMPONENT DE 'app',


EM QUE 

ENTÃO 

SERIAM 


ARMAZENADOS 
OS VALUES DE NOSSA FORM...











acho que é isso que o professor fará,

no caso..







ex:








export class AppComponent {








    user = {
        username: '',
        email: '',
        secretQuestion: '',
        answer: '',
        gender: ''

    }
}













-----> OK, AGORA QUANDO O METHOD FOR EXECUTADO,

VAMOS QUERER _ UPDATAR ESSES VALUES..








--> podemos fazer isso assim:















export class AppComponent {








    user = {
        username: '',
        email: '',
        secretQuestion: '',
        answer: '',
        gender: ''

    }








    onSubmit(form: ngForm) {



        console.log(this.form);



        this.user.username = formReference.value.username;


    }
}












--> COMEÇAMOS ASSIM..





--> isso vai definir o value desse nosso 'username' no statte

COMO 
SENDO 


esse value de 'username'

que temos LÁ NA NOSSA FORM..

















OK... ISSO DEU CERTO... O CÓDIGO FICOU ASSIM:



















import { Component, ViewChild } from '@angular/core';
import { NgForm } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
})
export class AppComponent {

  defaultQuestion: string = 'pet';  ////'pet' para a 'option' número 1, 'teacher' para a option número 2 (propriedade 'value' em cada 'option' é o que conta)...

  defaultTextValue: string = `There was one occasion in which I wrote a very long text, it was very long and had multiple lines and...`

  questionAnswer: string = 'TWO WAY DATABINDING';

  genders = ['Male', 'Female'];

  exemploGender = 'Female';  ///só um teste.



  user = {  ///vamos usar os values inputtados nos nossos input fields, na form, para OS ARMAZENAR AQUI E ENTÃO OUTPUTTAR no nosso template...
    username: '',
    email: '',
    secretQuestion: '',
    answer: '',
    gender: '',
    textValue: ''

}







  suggestedUserName() {
    const suggestedName = 'Superuser';
  }


  onSubmitForm(formReference: NgForm) { ///aqui será passado o ACTUAL FORM element, com todos seus input fields e <selects> (os controls de sua form, essencialmente)..
    console.log(formReference);
    console.log('submitted!');

    console.log('ISDIRTY?', formReference.dirty);

    console.log(formReference.value);
    console.log('ISVALID?', formReference.valid);
    console.log('ISTOUCHED?', formReference.touched);




    ///parte importante:


    this.user.username = formReference.value.userData.username;  ///ISSO TUDO VAI DEFINIR AQUELE STAET COMO SENDO OS VALUES que recebemos lá dos input fields...
    this.user.email = formReference.value.userData.email;
    this.user.secretQuestion = formReference.value.secret;
    this.user.answer = formReference.value.answer;
    this.user.gender = formReference.value.gender;
    this.user.textValue = formReference.value.textValue;

  }
}














E ASSIM:















        <div class="row">
          <div class="col-xs-12">
            <h3>Your Data</h3>
            <p>Username: {{ user.username}}</p>
            <p>Mail: {{ user.email}}</p>
            <p>Secret Question: {{ user.secretQuestion}}</p>
            <p>Answer: {{ user.answer}}</p>
            <p>Gender: {{ user.gender}}</p>
            <p>TextValue: {{user.textValue}}</p>
          </div>
        </div>















 oK....






 O QUE MAIS?







 UPDATAMOS TODA ESSA INFO NO NOSSO 'USER'...







---> O PROFESSOR TBM DIZ QUE É INTERESSANTE TER UMA PROPRIEDADE QUE 

TRACKE 

SE NÓS 

'JÁ SUBMITTAMOS A FORM OU NÃO',



por isso 

ele 



coloca uma propriedade 

de 

'submitted',
que começa como 'false'

e entaõ e´definida como 'true'

ao ser submittada nossa form... 













--> ELE VAI USAR ESSE 'submitted'
PARA RENDERIZAR 



CONDICIONALMENTE, COM 'ngIf',




NOSSA DIV COM TODAS AS INFORMATIONS/RESULTADOS DO SUBMIT:






        <div class="row" *ngIf="submitted">
          <div class="col-xs-12">
            <h3>Your Data</h3>
            <p>Username: {{ user.username}}</p>
            <p>Mail: {{ user.email}}</p>
            <p>Secret Question: {{ user.secretQuestion}}</p>
            <p>Answer: {{ user.answer}}</p>
            <p>Gender: {{ user.gender}}</p>
            <p>TextValue: {{user.textValue}}</p>
          </div>
















          -----> certo...






          até aí, tudo bem....















          -> QUANDO SUBMITTAMOS NOSSA FORM,



          ENXERGAMOS TODOS ESSES INPUTS AÍ, no nosso html...







--> É ASSIM QUE PODEMOS 'EXTRACT' A DATA,


COMO PODEMOS 
A UTILIZAR,


E COMO 


PODEMOS 
USAR 






uma prorpiedade como 'submitted' 


para 

ASSEGURAR QUE 






OS RESULTS SÓ SEJAM MOSTRADOS QUANDO A FORM FOR ACTUALLY SUBMITTADA...















-> OK, MAS DEVEMOS VER MAIS 1 PEQUENA COISINHA, ANTES 

DE PASSARMOS AO TÓPICO 

DE 
'REACTIVE FORMS'..