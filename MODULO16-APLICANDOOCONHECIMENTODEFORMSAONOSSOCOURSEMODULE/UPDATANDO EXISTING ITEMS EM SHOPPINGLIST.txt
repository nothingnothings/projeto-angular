







ACHO QUE JÁ CONSEGUI 




ESCREVER ESSE CÓDIGO..








ELE FICOU TIPO ASSIM:

















-> para consertar isso, provavelmente vou precisar de outra subscription....









--> NA VERDADE, FOI SÓ RECICLAR O CÓDIGO DO MEU 'Subject' antigo,

aquele Subject de 

'''



  ingredientsChanged = new Subject<Ingredient[]>();


'''











O CÓDIGO FICOU ASSIM:














SERVICE:








import {
  // EventEmitter, ///AGORA VAMOS USAR UM 'SUBJECT' no lugar de 'EVENTEMITTER', pq a cross-component communication com ele é SIMPLESMENTE MELHOR..

  Injectable,
  Output,
} from '@angular/core';
import { Subject } from 'rxjs';
import { Ingredient } from './shared/ingredient.model';

@Injectable()
export class ShoppingListService {
  // @Output() ingredientsChanged = new EventEmitter<Ingredient[]>();

  ingredientsChanged = new Subject<Ingredient[]>();

  ingredientSelected = new Subject<number>();

  //   ingredients: Ingredient[] = [  ///versão SEM O USO DE 'private' e 'getIngredients'...
  private ingredients: Ingredient[] = [
    // new Ingredient('Potato', 1, 1651882246336.7927),
    // new Ingredient('Tomato', 3, 1651882348842.3665),
    // new Ingredient('Banana', 5, 1651882373138.5793)

    new Ingredient('Potato', 1),
    new Ingredient('Tomato', 3),
    new Ingredient('Banana', 5),
  ];

  getIngredients() {
    return [...this.ingredients];
  }

  onIngredientAdd(ingredient: Ingredient) {
    console.log('RECEIVED');
    this.ingredients.push(ingredient);
    // this.ingredientsChanged.emit([...this.ingredients]);  ///será captado por 'shoppingListComponent', no 'ngOnInit', por meio de 'subscribe'...
    this.ingredientsChanged.next([...this.ingredients]);

    // console.log(this.ingredients);
  }

  loadShopListItem(index: number) {
    // const selectedIngredient = this.getIngredients()[index]

    this.ingredientSelected.next(index);
  }

  getIngredient(index: number) {
    return this.ingredients[index];
  }

  editIngredient(index: number, ingredient: Ingredient) {
    this.ingredients[index] = ingredient;

    this.ingredientsChanged.next([...this.ingredients]);
  }
}
















PARTE IMPORTANTE:



  ingredientsChanged = new Subject<Ingredient[]>();



  editIngredient(index: number, ingredient: Ingredient) {
    this.ingredients[index] = ingredient;

    this.ingredientsChanged.next([...this.ingredients]);
  }

















COMPONENT 'shop-list-edit':



















ngOnInit(): void {



   this.ingredientSelectedSubscription = this.shoppingListService.ingredientSelected.subscribe(
      (index: number) => {
            this.editedItemIndex = index;
            this.editMode = true; 
            this.editedItem = this.shoppingListService.getIngredient(index);

            this.formReference.form.setValue(
              {
                'name': this.editedItem.name,
                'amount': this.editedItem.amount
              }
            )
    } 
    )

  }












  onFormSubmit(form: NgForm) {

    const yourIngredient = new Ingredient(

      form.value['name'],
      form.value['amount']

    );


    if (this.editMode) {
      console.log(form);

      this.shoppingListService.editIngredient(this.editedItemIndex, yourIngredient);

   
    } else {

      this.shoppingListService.onIngredientAdd(yourIngredient);
    }


  }













CERTO.... ISSO REALMENTE FUNCIONOU...

























------> OK...










O PROFESSOR COMEÇA 


FALANDO QUE 






VAMOS QUERER 



DEPENDER DO STATE DE 'this.editMode'...












SE ESTIVERMOS EM 'editMode',




VAMOS QUERER QUE O BUTTON SEJA DE 'Edit' 


e naõ 

de 


'Add'..












OK. ISSO FOI BEM FÁCIL, BASTOU USAR UMA TERNARY EXPRESSION COM STRING INTERPOLATION:




   <div class="row">
        <div class="col-xs-12">
          <button class="btn btn-success" type="submit" [disabled]="!localFormReference.valid" > {{editMode ? 'Edit' : 'Add'}}</button>
          <button class="btn btn-danger" type="button">Delete</button>
          <button class="btn btn-primary" type="button" >Clear</button>
        </div>
    </div>












---------> OK...












--> eu também alterei o method de 'onFormSubmit',




QUE FIZ COM QUE 


DISPARASSE 2 DIFERENTES METHODS no service,


1 para 'addIngredient',


outro para 'editIngredient'...












FICOU TIPO ASSIM:








  onFormSubmit(form: NgForm) {

    const yourIngredient = new Ingredient(
      // this.nameInputRef.nativeElement.value,
      // this.amountInputRef.nativeElement.value
      form.value['name'],
      form.value['amount']

    );


    if (this.editMode) {
      console.log(form);

      this.shoppingListService.editIngredient(this.editedItemIndex, yourIngredient);

   
    } else {

      this.shoppingListService.onIngredientAdd(yourIngredient);
    }


  }
















E AÍ,


LÁ NOS SERVICES, OS METHODS FICARAM ASSIM:







  onIngredientAdd(ingredient: Ingredient) {
    console.log('RECEIVED');
    this.ingredients.push(ingredient);
    // this.ingredientsChanged.emit([...this.ingredients]);  ///será captado por 'shoppingListComponent', no 'ngOnInit', por meio de 'subscribe'...
    this.ingredientsChanged.next([...this.ingredients]);

    // console.log(this.ingredients);
  }

  editIngredient(index: number, ingredient: Ingredient) {
    this.ingredients[index] = ingredient;

    this.ingredientsChanged.next([...this.ingredients]);
  }

















  -------> O PROFESSOR TAMBÉM USOU UMA IF EXPRESSION




  para 

  diferenciar 

  entre os methods, tipo assim:








  

  onFormSubmit(form: NgForm) {

    const yourIngredient = new Ingredient(
      // this.nameInputRef.nativeElement.value,
      // this.amountInputRef.nativeElement.value
      form.value['name'],
      form.value['amount']

    );


    if (this.editMode) {
      console.log(form);

      this.shoppingListService.editIngredient(this.editedItemIndex, yourIngredient);

   
    } else {

      this.shoppingListService.onIngredientAdd(yourIngredient);
    }


  }











  certo... acertei tudo..












  agora nosso state está sendo atualizado, e as changes estão sendo refletidas na nossa ui...











  --> MAS AGORA TAMBÉM QEUREMOS QUE A FORM SEJA 'reset'


  AO _ EDITARMOS/ADICIONARMOS ALGUM ITEM....







  -> para isso, temos o method de 


  'form.form.reset()',

   eu acho....














   MEU CÓDIGO FICOU TIPO ASSIM:








   
  onFormSubmit(form: NgForm) {

    const yourIngredient = new Ingredient(
      // this.nameInputRef.nativeElement.value,
      // this.amountInputRef.nativeElement.value
      form.value['name'],
      form.value['amount']

    );


    if (this.editMode) {
      console.log(form);

      this.shoppingListService.editIngredient(this.editedItemIndex, yourIngredient);
      this.editMode = false;
   
    } else {

      this.shoppingListService.onIngredientAdd(yourIngredient);
   
    }

    this.formReference.form.reset();
  }

















  -> eu preciso colocar o 'editMode'

  como false, também,

  para que o user retorne ao state de 'ADD' inicial...