












-> TER O AUTO-LOGIN é algo mt bom para apps angular,





AQUELE METHOD DE 'auto-login',


cujo call deve sempre ser colocado no ngOnInit



do 'app.component.ts':






import { Component, OnInit } from '@angular/core';
import { AuthService } from './auth.service';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
})
export class AppComponent implements OnInit {
  // selectedPage: string = 'recipeBook';  ////NAVIGATION _ SEM ROUTING_...



  constructor(private authService: AuthService) {}

  // pageSwitcher(page: string) {  ///navigation SEM ROUTING...
  //   this.selectedPage = page;
  // }



  ngOnInit(): void {  

    console.log('AUTLOGIN');
      ////isso é BEM IMPORTANTE, sempre coloque-o no component que faz 'startup' do seu app...
    this.authService.autoLogin(); ////vai tentar realizar o 'AUTO LOGIN' de nosso user (vai tentar FAZER O EMIT DO 'USER JÁ ARMAZENADO NO LOCAL STORAGE' a outros COMPONENTS DE NOSSO APP)...




  }


}


















-_> OK, MAS E QUANTO à 'auto logout'?















--> ISSO PQ NOSSA TOKEN SEMPRE VAI EXPIRAR,


ELA TEM 




UM EXPIRY TIME DE 1 HORA



APÓS 




sua obtençaõ...









--> E AGORA, NO MOMENTO,



TEMOS UM __ BUG _ COM NOSSO APP --------> ISSO PQ 


A TOKEN CERTAMENTE VAI EXPIRAR,


SIM,


MAS _ NOSSO APP NUNCA VAI 'EXPURGAR' 


essa token,



e nunca vai refletir isso....















-----> isso quer dizer que o user ficará 'logged in' para sempre,


mas não poderá mais fazer as operações de nosso app (pq a api do firebase não deixará uma token expirada 

realizar requests a sua api)....















---> já vi algo parecido LÁ NO APP DO REACT...














tipo algo assim:






export const checkAuthTimeout = (expirationTime) => {
  return (dispatch) => {
    setTimeout(() => {
      dispatch(authLogout());
    }, expirationTime * 1000);
  };
};


















---> no nosso código angular, precisamos de algo parecido,

precisamos 




de algo como 




export const authCheckState = () => {
  return dispatch => {
      const token = localStorage.getItem('token');
      if(!token) {
        // console.log('test');
        dispatch(authLogout())
      } else {
        const expirationDate = new Date(localStorage.getItem('expirationDate'));
        if (expirationDate <= new Date()) {
          dispatch(authLogout());
        } 
        else {
          const userId = localStorage.getItem('userId');
          const email = localStorage.getItem('email');
          dispatch(authSuccess(token, userId, email)); ///////// esse userId é aquele 'gettado' logo acima....
          // dispatch(checkAuthTimeout(expirationDate.getSeconds() - new Date().getSeconds()));  ////este código NÃO VAI FUNCIONAR... vai introduzir um PROBLEMA NO NOSSO CÓDIGO: nosso código vai sempre executar 'auth_logout'... ---------> ao usar 'getTime()' em vez de 'getSeconds()', nós vamos obter A DIFERENÇA ENTRE O 'FUTURO' E O 'PRESENTE' (que é o tempo até a token expirar, basicamente) EM __MILISSEGUNDOS___, que é exatamente o que queremos (pq a unidade de tempo usada GERALMENTE no javascript é MILISSEGUNDOS.... os timers/setTimeouts também funcionam com ms, e é por isso que vamos utilizar '.getTime()' aqui....)
          dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000 ));  ////devemos WRAPPAR essa expressão em parênteses PARA PODER ENTÃO A DIVIDIR por 1000... ---> e dividimos por 1000 pq LOGO DEPOIS ELA SERÁ MULTIPLICADA por '1000', lá na action de checkAuthTimeout()...
        }
  
      }
  }
}







  componentDidMount() {
    this.props.onTryAutoSignIn();
  }





const mapDispatchToProps = (dispatch) => {
  return {
    onTryAutoSignIn: (token) => dispatch(actionsTypes.authCheckState(token)),
  };
};

















--> ou seja,




uma function que 



DISPARE __ TAMBÉM _ no 'ROOT' de nosso app,




bem lá no 'app.component.ts',






E QUE AÍ 




SETTE UM _ TIMER_, um 'setTimeout()'




que ENTAÕ, AO FINAL, VAI DISPARAR AQUELE METHOD DE 'authLogout()'...












--> PARA ISSO, PRECISAMOS DE MAIS UM METHOD 



em 'auth.service.ts',





QUE PROVAVELMENTE SERÁ 'checkAuthState', ou então 'autoLogout'...













-> DEVO ASSISTIR A AULA DO PROFESSOR..









--> NOSSO APP ESTÁ HORRÍVEL ATUALMETNE,


PQ SE O TOKEN EXPIRAR, ELE MESMO ASSIM NÃO SERÁ 



REMOVIDO DO 



LOCAL STORAGE....










--> o primeiro passo é 'CLEAR THE LOCAL STORAGE'

no caso de logoff,








por isso o professor escreve assim:










logout() {

    this.user.next(null);
    this.router.navigate(['/auth']);
    localStorage.removeItem('userData');

}















----> OK... MAS O QUE INTERESSA, AGORA , É QUE PRECISAMOS 'SET A TIMER'






__ QUANDO A TOKEN FOR ARMAZENADA NO LOCAL STORAGE,


OU ENTÃO 







''WHEN WE FIRST GET A TOKEN',

 



 TUDO PARA QUE CONSIGAMOS FAZER 'INVALIDATE' dessa token,


 em um momento posterior no tempo....











 --> PARA ISSO, PROVAVELMENTE __ PRECISAREMOS DE UM NOVO METHOD....










 --> O PROFESSOR CHAMA DE 'autoLogout'...











 autoLogout() {


 }










 -> ESSE METHOD VAI 'SET A TIMER' para então 


 AUTOMATICALLY LOG THE USER OUT quando seu timer expirar...













 -> TIPO ALGO ASSIM:









  autoLogout(expirationTime: number) {  //define um TIMER para então FAZER LOGOUT do user (quando o tempo acabar)....


     setTimeout(
       () => {

        this.logoutUser();


       },
       expirationTime * 1000

     )


  }


}












-> ESSE ARGUMENTO 'expirationTime'


SERÁ _ A QUANTIDADE __ DE SEGUNDOS __ QUE


TEREMOS _ ANTES_ DO TOKEN FICAR COMO 'INVALID' (multiplicamos isso por 1000 pq os setTimeout são sempre em ms).....











------> ok... MAS AQUI TEMOS ALGO _______ IMPORTANTE...









--> a coisa importante é que 



QUANDO ACONTECER O 'logout',


ESSE 

__TIMER_ AÍ _ DEVE 




_ACABAR 'CLEARED OUT' .... ---> ISSO 


PQ 




__ SE NÓS DECIDIRMOS FAZER O LOGOUT _ MANUALMENTE, POR MEIO DO BUTTON DE 'LOGOUT',





ISSO FARÁ COM QUE ESSE TIMER _NUNCA _ DEIXE DE EXISTIR...










---> é por isso que precisaremos usar aquele method especial de 'removeSetTimeout()' (é algo assim),



QUANDO 


CHAMARMOS O 'authLogout' method....









--> É O METHOD vanilla DE 'clearTimeout()'..










-> E NÓS PRECISAMOS, DE ALGUMA FORMA,



PASSAR UMA REFERÊNCIA DO NOSSO 'timeout'



A ESSE 

method aí...













-> É O QUE EU PENSEI:

VAMOS ARMAZENAR NOSSO 

'TIMER' EM UMA __ PROPRIEDADE,







DENTRO DO SERVICE DE 'auth.service.ts'...








--> PARA ISSO, CRIAMOS UMA PROPRIEDADE DE NOME 



'tokenExpirationTimer',


DE TYPE 'any' (parece que não existe um type de 'timer')...














O CÓDIGO FICA TIPO ASSIM:





  autoLogout(expirationTime: number) {  //define um TIMER para então FAZER LOGOUT do user (quando o tempo acabar)....

  this.tokenExpirationTimer = setTimeout(
       () => {

        this.logoutUser();


       },
       expirationTime * 1000

     );

  }





    logoutUser() {

    clearTimeout(this.tokenExpirationTimer);
    localStorage.removeItem('userData');

    this.emitUser(null)

    this.router.navigate(['/auth']);

  }












  ----------------------------------












  ok..
   




MAS AQUI TEMOS UM PROBLEMA, NESSE CÓDIGO...








--> EU SIMPLESMENTE FAÇO O 'clear'

DESSE TIMER SEM PERGUNTAR NADA,
 
 MAS É POSSÍVEL QUE 

 NÃO TENHAMSO NENHUM TIMER ENGATILHADO,


 por isso 



 o professor coloca este if check:











if (this.tokenExpirationTimer) {




}





-> SÓ SE TIVERMOS ESSE NEGÓCIO 





DEFINIDO,
VAMOS QUERER 


CLEAR ESSE TIMER...






-> APÓS ISSO,

DEFINIMOS O 'tokenExpirationTimer'


DE VOLTA A 'null', manualmente...








Ex:












  autoLogout(expirationTime: number) {  //define um TIMER para então FAZER LOGOUT do user (quando o tempo acabar)....

  this.tokenExpirationTimer = setTimeout(
       () => {

        this.logoutUser();


       },
       expirationTime * 1000

     );

  }





    logoutUser() {

    clearTimeout(this.tokenExpirationTimer);
    localStorage.removeItem('userData');

    this.emitUser(null)

    this.router.navigate(['/auth']);

  }














EX:


















  logoutUser() {
    // localStorage.removeItem('token');
    // localStorage.removeItem('userId');
    // localStorage.removeItem('expirationDate');
    // localStorage.removeItem('email');
    


    this.emitUser(null);

    localStorage.removeItem('userData');

    this.router.navigate(['/auth']);


    if (this.tokenExpirationTimer) {   ///'cleanup' de nosso timer de 'autologout' (em caso de tokens expiradas), CUJO TIMER NÃO VAI DEIXAR DE EXISTIR SOZINHO.. (precisamos limpar manualmente, com 'clearTimeout()')....

      clearTimeout(this.tokenExpirationTimer);
    }

    this.tokenExpirationTimer = null; ///resettamos o state de nosso 'tokenExpirationTimer' property...


  
  }






  autoLogout(expirationTime: number) {  //define um TIMER para então FAZER LOGOUT do user (quando o tempo acabar)....

  this.tokenExpirationTimer = setTimeout(
       () => {

        this.logoutUser();


       },
       expirationTime * 1000

     );

  }














  -> OK.... A ÚNICA COISA QUE NOS FALTA, AGORA, É _ NOS ASSEGURAR DE CHAMAR 

  'autoLogout()'



  EM ALGUM LUGAR ADEQUADO,



  PQ 




  AINDA NÃO ESTAMOS FAZENDO ISSO... --> PRECISAMOS 



  CHAMAR ELE EM ALGUM LUGAR,


  PARA FAZER COM QUE ESSE TIMER ___ 'COMECE'..








  ----> MAS QUANDO VAMOS QUERER CHAMAR ESSE METHOD?







  -> BEM, BASICAMENTE '''SEMPRE QUE NÓS FIZERMOS EMIT DE UM NOVO USER AO NOSSO APP'''






  ----> ou seja,





  __ QUEREMOS QUE 'autoLogout'


  SEJA EXECUTADO _ _SEMPRE_ QUE 




  NOSSO USER SUBJECT FOR UTILIZADO, por meio do código de 



  'this.user.next(user)'   (forward de 1 user ao subject de 'user')...









  -> NO 'AUTOLOGIN', por exemplo,


  temos 1 desses cases....







  -> TAMBÉM TEMOS ESSES CASES LÁ NO 'signup' e no 'login'.....












  O CÓDIGO FICARÁ MAIS OU MENOS ASSIM:













    onCreateAccount(authData: {
    email: string;
    password: string;
    returnSecureToken: boolean;
  }) {
    const requestHeaders = new HttpHeaders();

    requestHeaders.append('Content-Type', 'application/json');
 
    return this.http
      .post<AuthResponseData>(
        // 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDJgmB6dgifUuTeYPm1MLeJ7Jh93spUKtg',  ///VERSÃO _ DUMMY__ (sem authentication rules no firebase)
        'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBK3AXsu9Gn0fqLmA0zOdUAknDM48Nwk_o', ////VERSÃO COM AUTHENTICATE, DEPLOY

        authData,
        {
          headers: requestHeaders,
        }
      )
      .pipe(
        catchError(
          //vamos usar esse operator para MANIPULAR NOSSAS 'ERROR RESPONSES', QUANDO OCORREREM..
          (errorRes) => {
            console.log(errorRes);
            let errorMessage = 'An unknown error has occured.';

            if (!errorRes.error || !errorRes.error.error) {
              //conserta o choro do typescript..
              return throwError(() => errorMessage); /////vai dar throw da message de 'An unknown error occurred!'
            }

            switch (errorRes.error.error.message) {
              case 'EMAIL_EXISTS':
                errorMessage = 'This email already exists.';
            }

            return throwError(() => errorMessage);
          }
        ),

        tap(

        
        (responseData) => {
          this.storeUserToken(responseData); ///ler código deste method...
          this.emitUser(responseData);
          this.autoLogout(+responseData.expiresIn);
        }
        
        )
      );
















EX:









        tap(

        
        (responseData) => {
          this.storeUserToken(responseData); ///ler código deste method...
          this.emitUser(responseData);
          this.autoLogout(+responseData.expiresIn);
        }
        
        )



















        -> CERTO... mas em 'autologin'


        ,

        O METHOD,


        ISSO SERÁ UM POUCO MAIS COMPLEXO...






        ex:





          autoLogin() {


    const userData= JSON.parse(localStorage.getItem('userData')!); ///O VALUE QUE VAMOS RETRIEVAR LÁ DO LOCAL STORAGE DEFINITIVAMENTE SERÁ UMA STRING, por isso usamos 'JSON.parse()' para converter essa string (json data) em um OBJECT JAVASCRIPT 


    if (!userData) { ///case em que NÃO TEMOS TOKEN ALGUMA/token inválida no local storage..
      return; 
    }



    const loadedUser = new User(userData.email, userData.userId, userData.token!, new Date(userData.expirationDate));



    if(loadedUser.token) { ////com isso, através do GETTER de 'loadedUser.token' (pq nosso model de 'User' tem esse getter), _ CHECAMOS _ SE EXISTE UM VALID TOKEN DENTRO DESSE NOSSO USER (caso não exista, o getter retornará 'null' --> isso pq NULL É UM FALSY VALUE, e tiramos vantagem disso nesse if block aqui...)...



      ////se nosso token no localStorage for VÁLIDO, vai fazer forward dessa info a TODOS OS COMPONENTS DE NOSSO APP, por meio desse forward de 'loadedUser', autenticando nosso user, essencialmente...
    this.user.next(loadedUser);  ////vai reatualizar a UI DE NOSSO APP com esse user que vai ser fetcheado da data inserida no local storage(é o 'auto-login', presente quando sempre recarregamos nossa page..)

    }




  }









------------------------------









fiz isso tanto em 'login' como 'signup'....












->_ mas no autologin as coisas serão mais complexas...













--> LÁ NO AUTOLOGIN,



NESTE BLOCK AQUI:

















    if(loadedUser.token) {


    this.user.next(loadedUser);  

    }











    -> SE NOSSA TOKEN REALMENTE FOR VÁLIDA, VAMOS TAMBÉM QUERER CHAMAR 'autoLogout',




    MAS __ A DIFERENÇA_ É QUE _ AQUI VAMOS QUERER 'CALCULATE' O REMAINING TIME ATÉ O USER SER LOGGED OUT...









----> COMO NÓS TEMOS A 'tokenExpirationDate' 



DENTRO DE NOSSO USER, NOSSO 'LOADED USER', 



É POSSÍVEL OBTER O 'REMANING TIME', em segundos, 




DO USER NO NOSSO APP....




BASTA CRIAR UMA CONST ASSIm:












const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();
















--> O PROBLEMA, É CLARO, É QUE ESSA CONTA NOS RETORNARÁ UM RESULTADO EM MILISSEGUNDOS,





por isso temos que dividir esse resultado por 1000,







tipo assim:



const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime() / 1000;
























O CÓDIGO FICOU ASSIM:












  autoLogout(expirationTime: number) {  //define um TIMER para então FAZER LOGOUT do user (quando o tempo acabar)....

  this.tokenExpirationTimer = setTimeout(
       () => {

        this.logoutUser();


       },
       expirationTime * 1000

     );

  }
















E ASSIm:














autoLogin() {


    const userData= JSON.parse(localStorage.getItem('userData')!); ///O VALUE QUE VAMOS RETRIEVAR LÁ DO LOCAL STORAGE DEFINITIVAMENTE SERÁ UMA STRING, por isso usamos 'JSON.parse()' para converter essa string (json data) em um OBJECT JAVASCRIPT 


    if (!userData) { ///case em que NÃO TEMOS TOKEN ALGUMA/token inválida no local storage..
      return; 
    }



    const loadedUser = new User(userData.email, userData.userId, userData.token!, new Date(userData.expirationDate));



    if(loadedUser.token) { ////com isso, através do GETTER de 'loadedUser.token' (pq nosso model de 'User' tem esse getter), _ CHECAMOS _ SE EXISTE UM VALID TOKEN DENTRO DESSE NOSSO USER (caso não exista, o getter retornará 'null' --> isso pq NULL É UM FALSY VALUE, e tiramos vantagem disso nesse if block aqui...)...


      const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime() / 1000;  ///coloquei o '/1000' pq esse value deve entrar COMO SECONDS, lá nessa nossa function de 'authLogout()'..
       
     
    this.user.next(loadedUser);  



    this.autoLogout(expirationDuration);
    }




  }













  certo...











  agora devo testar esse código..














  ------> agora devemos testar nossa feature de autoLogout, por isso o professor troca o timer para o fire do 




  logout, naquele timer,



  para 2 segundos (2000 ms)...















  -> hmmm.... mas passei algum value nesse timer de forma ERRADA,



  pq 



  meu app fica unauth em 2 segundos...










  -> o auth está durando 1 segundo, menos do que isso...













  -_> CONSERTEI.... USEI UM POUCO DE CÓDIGO SPAGHETTI,

  E ALGUMAS CONVERSÕES:
















    autoLogin() {


    const userData = JSON.parse(localStorage.getItem('userData')!); ///O VALUE QUE VAMOS RETRIEVAR LÁ DO LOCAL STORAGE DEFINITIVAMENTE SERÁ UMA STRING, por isso usamos 'JSON.parse()' para converter essa string (json data) em um OBJECT JAVASCRIPT 


    if (!userData) { ///case em que NÃO TEMOS TOKEN ALGUMA/token inválida no local storage..
      return; 
    }



    const loadedUser = new User(userData.email, userData.userId, userData.token!, new Date(userData.expirationDate));


  

    if(loadedUser.token) { ////com isso, através do GETTER de 'loadedUser.token' (pq nosso model de 'User' tem esse getter), _ CHECAMOS _ SE EXISTE UM VALID TOKEN DENTRO DESSE NOSSO USER (caso não exista, o getter retornará 'null' --> isso pq NULL É UM FALSY VALUE, e tiramos vantagem disso nesse if block aqui...)...


      console.log(typeof userData.expirationDate);
      const expirationDuration = Date.parse(userData.expirationDate) - new Date().getTime();  ///coloquei o '/1000' pq esse value deve entrar COMO SECONDS, lá nessa nossa function de 'authLogout()'..
       
      ////se nosso token no localStorage for VÁLIDO, vai fazer forward dessa info a TODOS OS COMPONENTS DE NOSSO APP, por meio desse forward de 'loadedUser', autenticando nosso user, essencialmente...
    this.user.next(loadedUser);  ////vai reatualizar a UI DE NOSSO APP com esse user que vai ser fetcheado da data inserida no local storage(é o 'auto-login', presente quando sempre recarregamos nossa page..)


    console.log(expirationDuration / 1000);

    this.autoLogout(expirationDuration/1000);
    }




  }














  --> ok, agora o timer está correndo normalmente...














  ---> o timer dura 1 hora, 1 hora para 



  nosso 


  autoLogout...







  ---> MAS AINDA DEVEMOS MELHROAR ALGUMAS COISAS:








  ** A ROUTE DE 'RECIPES' SÓ PODERÁ SER ACESSADA QUANDO ESTIVERMOS 'LOGGED IN'...











  --> isso é algo que queremos prevenir, no nosso app...





  -> VEREMOS AUTH GUARDS NA PRÓXIMA AULA, com 'canActivate' e etc...