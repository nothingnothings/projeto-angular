















--> OK... DE VOLTA AO NOSSO PROJETO FIREBASE,




E ASSIM COMO 


OS 'NORMAL HTTP REQUESTS',




É ÓBVIO QUE 





__ NÁO PRECISAMOS DO FIREBASE PARA ADICIONAR VALIDATION 


A UM APP 


ANGULAR... - ------> PODEMOS ADICIONAR 



VALIDATION 




COM QUALQUER BACKEND,


SEJA UM 



REST OU GRAPHQL API -------> seu backend SÓ __ PRECISA __ 


OFERECER ENDPOINTS,

ENDPOINTS QUE VOCÊ PODE USAR PARA CRIAR NOVOS 


USERS E 'LOG USERS IN',





tudo para conseguir aquela json web token..










--> E SE SUA API SUPORTA ISSO (e a grande maioria suporta),




E SE VOCÊ TIVER SUA PRÓPRIA API,


VOCÊ PODE 


ADICIONAR SUA PRÓPRIA AUTH LOGIC (node, etc),


VOCÊ PODE USÁ-LA...











------> o  professor só está usando o firebase pq é FREE,


easy to use e 

NÃO 


REQUER QUE ESCREVAMOS SERVERSIDE CODE..












----> lá no firebase,


ELE REQUER QUE INPUTTEMOS 



UM NOVO 'SIGNIN METHOD' --> colocamos 



'EMAIL', é claro...















-----> OK.. MAS ANTES DISSO,

VAMOS ATÉ 'RULES'


lá no firebase,


 
  
  EM QUE ENCONTRAMOS AS RULES, DE TESTE,

  ASSIM:










  rules: {
      read: true,
      write: true
  }













  --> ISSO SIGNIFICA QUE 


  TODOS PODEM 'DEAL WITH OUR RECIPES',

  PODEM 



  LER NOSSAS RECIPES,


  EDITAR NOSSAS RECIPES,


   ETC ETC....










   --> ISSO ERA NECESSÁRIO NO PASSADO, SIM,


   PQ __ NÃO TÍNHAMOS NENHUMA AUTHENTICATION CODADA...








   ---> MAS AGORA ISSO VAI MUDAR,



   COMO ISSO VAI MUDAR,



   VAMOS 

   MUDAR ESSAS SETTINGS ----->  














   A MUDANÇA SERÁ QUE O VALUE DESSES NEGÓCIOS SERÁ DE 



   'auth != null',









   o que QUER DIZER QUE O FIREBASE 
   SÓ 


   VAI PERMITIR QUE _ AUTHENTICATED__ USERS_ CONSIGAM FAZER 'READ' E 'WRITE'


   DE DATA...
















   --> É CLARO QUE SE VOCÊ ESTÁ/ESTAVA USANDO FIREBASE PARA SEU PROJETO,


   VOCê PODE DEFINIR RULES MAIS SOFISTICADAS,


   PARA DIFERENTES RESOURCES,


   dependendo do seu use-case...








   -> MAS AQUI, COMO O USER QUER 'LOCK DOWN EVERYTHING',


   TODA 


   A FIREBASE DATABASE 


   SE OS USERS NÃO ESTIVEREM AUTENTICADOS,

   ELE DEIXA ASSIm:







3









   --> vou criar um novo projeto para isso, para que seja a '''VERSÃO DE DEPLOY''' (com authenticate)










   aí posso ter 2 projetos, um COM AUTHENTICATION (exige senha e conta)



   E OUTRO SEM (não exige conta, nem senha)....














   FICOU TIPO ALGO ASSIM:




























   import {
  EventEmitter, ///TROCAMOS POR 'SUBJECT', que é simplesmente MELHOR como CROSS-COMPONENT COMMUNICATION TOOL....
  Injectable,
  Output,
} from '@angular/core';

import { HttpClient } from '@angular/common/http';
import { map, Subject, tap } from 'rxjs';
import { Recipe } from './recipeBook/recipe.model';
import { Ingredient } from './shared/ingredient.model';
import { ShoppingListService } from './shoppingList.service';

@Injectable()
export class RecipeBookService {
  private recipes: Recipe[] = [
    //professor colocou como PRIVATE....
    // new Recipe(
    //   'Chicken Wings',
    //   'Delicious chicken wings',
    //   'https://www.farmfor.com.br/wp-content/uploads/2022/02/coxinha-da-asa-superbowl.jpg',
    //   [
    //     new Ingredient('Potato', 1, 0),
    //     new Ingredient('Tomato', 2, 0),
    //     new Ingredient('Banana', 5, 0),
    //   ],
    //   0
    // ),
    // new Recipe(
    //   'Pork Chops',
    //   'Tasty pork chops, check them out',
    //   'http://t2.gstatic.com/licensed-image?q=tbn:ANd9GcQsRbNYL4S-Noacb27Vi-sbWzURFRjW9YN8VOScbiJ0DxTAiGxTyqlNdG1TWHKN1xWqOV4UhHaFef-fBD8-PGo',
    //   [
    //     new Ingredient('Lettuce', 5, 1),
    //     new Ingredient('Apple', 4, 1),
    //     new Ingredient('Banana', 1, 1),
    //   ],
    //   1
    // ),
    // new Recipe(
    //   'Caesar Salad',
    //   'Fresh and healthy salad',
    //   'https://www.confeiteiradesucesso.com/wp-content/uploads/2019/06/ceasarsalad-fb.jpg',
    //   [
    //     new Ingredient('Pumpkin', 3, 2),
    //     new Ingredient('Meat', 9,  2),
    //     new Ingredient('Avocado', 4, 2),
    //   ],
    //   2
    // ),
  ];

  constructor(
    private shoppingListService: ShoppingListService,
    private http: HttpClient
  ) {}

  getRecipes() {
    return [...this.recipes];
  }

  loadRecipes() {
    return this.http
      .get<{ [name: string]: Recipe }>(
        // 'https://recipebookdummyproject-default-rtdb.firebaseio.com/recipes.json' ///VERSÃO DUMMY, SEM AUTHENTICATE RULES NO FIREBASE API
        'https://recipebookdeployproject-default-rtdb.firebaseio.com/recipes.json', //VERSÃO DEPLOY, com o uso de AUTHENTICATE RULES no firebase api (restrição de acesso a contas com email)...
      )
      .pipe(
        map((data) => {
          const transformedRecipesArray: Recipe[] = [];

          console.log(data);

          for (const key in data) {
            if (data.hasOwnProperty(key)) {
              transformedRecipesArray.push({ ...data[key] });
            }
          }

          transformedRecipesArray.map((recipe) => {  
            return {
              ...recipe,
              ingredients: recipe.ingredients ? recipe.ingredients : [],   ////////SE NOSSA PROPRIEDADE 'ingredients' dessa recipe específica NÃO EXISTIR (um bug possível), VAMOS QUERER QUE OS INGREDIENTS SEJAM SETTADOS COMO UM EMPTY ARRAY....
            };
          });

          return transformedRecipesArray;
        })

        ,tap(
          (recipes) => {
            console.log('TEST')
            this.recipes = recipes;
            this.recipeItemsChanged.next([...recipes]);
          }
        )
      )
      // .subscribe((recipes) => { ///movido lá para 'header.component.ts'...
      //   this.recipes = recipes;
      //   this.recipes = recipes;

      //   this.recipeItemsChanged.next([...recipes]);
      // });
  }

  saveRecipes() {
    console.log('SAVED');
    return this.http
      .put( //////a url de cima é a versão DE DUMMY DO NOSSO PROJETO, SEM AUTHENTICATION RULES NO FIREBASE API..
        // 'https://recipebookdummyproject-default-rtdb.firebaseio.com/recipes.json', ////será um request de PUT, e não de 'POST'... --> ISSO PQ QUEREMOS SEMPRE OVERWRITTAR O VALUE ANTIGO DE 'recipes' com o nosso NOVO value...
        'https://recipebookdeployproject-default-rtdb.firebaseio.com/recipes.json', //VERSÃO DEPLOY, com o uso de AUTHENTICATE RULES no firebase api (restrição de acesso a contas com email)...
        this.recipes
      )
      .subscribe((response) => {
        console.log(response);
      });
  }

  // recipeItemClickedEmitter = new EventEmitter<Recipe>();

  recipeItemClickedEmitter = new Subject<Recipe>();

  recipeItemsChanged = new Subject<Recipe[]>();

  // loadedRecipe: Recipe;

  // recipeItemClicked(index: number) {

  //   const recipe = this.recipes[index];
  //   // this.recipeItemClickedEmitter.emit(recipe);

  //   this.recipeItemClickedEmitter.next(recipe);
  // }

  sendToShopList(ingredients: Ingredient[]) {
    for (let ingredient of ingredients) {
      ////minha versão do código --> downside: mtos events disparados, mas não há problema..
      this.shoppingListService.onIngredientAdd(ingredient);
      console.log('SENT');
    }

    ////after that, sends the user to the 'shoppingList' page...
  }

  getRecipe(id: number): Recipe {
    // return this.recipes[id];

    const selectedRecipe = this.recipes.find((recipe) => {
      return recipe.id === id;
    })!;
    return selectedRecipe;
  }

  editRecipe(id: number, recipe: Recipe) {
    this.recipes[id] = recipe;
  }

  onRecipeEdited(editedRecipe: Recipe, index: number) {
    // this.recipes[index] = editedRecipe;

   const recipeIndex =  this.recipes.findIndex(
      (recipe) => {
        return recipe.id === index;
      }
    )

    this.recipes[recipeIndex] = editedRecipe;


    console.log(this.recipes);

    this.recipeItemsChanged.next([...this.recipes]);
  }

  onRecipeAdded(newRecipe: Recipe) {
    this.recipes.push(newRecipe);

    this.recipeItemsChanged.next([...this.recipes]);
  }

  onRecipeDeleted(index: number) {
    this.recipes.splice(index, 1);
    this.recipeItemsChanged.next([...this.recipes]);
  }
}

















E ASSim:
























import { HttpClient, HttpResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';

import { HttpHeaders } from '@angular/common/http';

import { HttpParams } from '@angular/common/http';
import { Router } from '@angular/router';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  constructor(private http: HttpClient, private router: Router) {}

  onCreateAccount(authData: {
    email: string;
    password: string;
    returnSecureToken: boolean;
  }) {
    const requestHeaders = new HttpHeaders();

    requestHeaders.append('Content-Type', 'application/json');
    // requestHeaders.append('Content-Type', 'application/json');

   return this.http
      .post(
        // 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDJgmB6dgifUuTeYPm1MLeJ7Jh93spUKtg',  ///VERSÃO _ DUMMY__ (sem authentication rules no firebase)
        'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBK3AXsu9Gn0fqLmA0zOdUAknDM48Nwk_o',  ////VERSÃO COM AUTHENTICATE, DEPLOY

        authData,
        {
          headers: requestHeaders,
        }
      )
      // .subscribe((responseData) => {
      //   console.log(responseData);


      // });
  }

  onLogin(authData: {
    email: string;
    password: string;
    returnSecureToken: boolean;
  }) {
    const requestHeaders = new HttpHeaders();

    requestHeaders.append('Content-Type', 'application/json');

    this.http.post<{expiresIn: number, idToken: string, expirationDate: string, localId: string, email: string} >(
      // 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDJgmB6dgifUuTeYPm1MLeJ7Jh93spUKtg', //VERSÃO DUMMY (sem authentication rules no firebase)
      'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBK3AXsu9Gn0fqLmA0zOdUAknDM48Nwk_o',   ////VERSÃO COM AUTHENTICATE, DEPLOY
      authData,

      {
        headers: requestHeaders
      }
    )
    .subscribe(
      (responseData) => {
        console.log(responseData);
        const expirationDate = new Date(new Date().getTime() + responseData.expiresIn * 1000); ////lembre-se de adicionar '* 1000', pois o JAVASCRIPT SEMPRE CONSIDERA 'TEMPO' EM MILISSEGUNDOS, E NÃO EM SEGUNDOS.... (só o 'expiresIn' que é mostrado em segundos....)
        localStorage.setItem('token', responseData.idToken);
        localStorage.setItem('expirationDate', expirationDate.toString());
        localStorage.setItem('userId', responseData.localId);
        localStorage.setItem('email', responseData.email )
      
        this.router.navigate(['/recipe-book'])
      }
    )
  }
}
























--> certo... fora isso, nosso código continua O MESMO....














----> MAS AGORA, SE SEGUIRMOS ATÉ A PAGE DE 'RECIPES' E TENTARMOS FAZER FETCH DE DATA,




AUTOMATICAMENTE



___RECEBEMOS UM ERROR_,


ERROR DE 




''401, 



UNAUTHORIZED, 





''',



TUDO 

PQ 

DEFINIMOS 

AQUELAS RULES LÁ NO FIREBASE:








   rules: {
       read: 'auth != null',
       'write': 'auth != null'
   }




















-----> MAS ESSA PAGE DE 'localhost:4200/recipe-book'





NEM SERÁ ALCANÇADA NORMALMENTE, NO NOSSO CÓDIGO... ---> ISSO 



PQ VAMOS PROVIDENCIAR UMA BOA USER EXPERIENCE 



QUE 

VAI REDIRECIONAR AUTOMATICAMENTE O USER à PAGE DE 


'auth'



QUANDO _ ELE __ TENTAR_ ACESSAR 


NOSSA PAGE SEM TER 


A AUTHENTICATION NECESSÁRIA (sem ter a TOKEN ADEQUADA LÁ NA SUA LOCAL STORAGE, QUE ENTAÕ SERÁ ENFIADA,

DE ALGUM MODO, NO HTTP REQUEST DE GET QUE É ENVIADO AO BACKEND, E EM TODO HTTP REQUEST SUBSEQUENTE...)


















-> CERTO... VAMOS ADICIONAR LENTAMENTE A LÓGICA DE 







'BE ABLE TO VISIT OUR UNAUTH 


ROUTES'..








-----> É POR ISSO QUE COLOCAMOS EMAIL/PASSWORD COMO 


authentication do firebase..





--> ISSO QUER DIZER QUE 
PODEMOS ENVIAR 


REQUESTS A CERTOS 



ENDPOINTS 


DO FIREBASE PARA CREATE/LOGIN 



accounts...







--> MAS QUE ENDPOINTS SÃO ESSES?







--> JÁ OS ESTUDAMOS, SÃO ESTES:








 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBK3AXsu9Gn0fqLmA0zOdUAknDM48Nwk_o', 


 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBK3AXsu9Gn0fqLmA0zOdUAknDM48Nwk_o',   ////VERSÃO COM AUTHENTICATE, DEPLOY

















 --> NO FIREBASE, QUANDO UM USER É CRIADO, ELE PODE SER VISUALIZADO NA ABA DE 'users', em 'authentication'...













 OBS:



 In order to continue with this module and send successful authenticated requests, you need to ensure that you got recipes stored in your backend database.

So in case you deleted those (or never added any), make sure you do add some recipes before you turn on protection as shown in the last lecture!




