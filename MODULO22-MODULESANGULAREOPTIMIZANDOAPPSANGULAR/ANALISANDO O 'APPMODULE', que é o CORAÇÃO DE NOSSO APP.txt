






O CÓDIGO DE APP.module.ts É ESTE:













import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http'

import { AppComponent } from './app.component';

import { HeaderComponent } from './headerComponent/headerComponent.app';

import { RecipeBookComponent } from './recipeBook/recipe-book.component';
import { RecipeItemComponent } from './recipeBook/recipe-list/recipe-item/recipe-item.component';
import { RecipeListComponent } from './recipeBook/recipe-list/recipe-list.component';
import { RecipeDetailComponent } from './recipeBook/recipe-detail/recipe-detail.component';
import { ShoppingListComponent } from './ShoppingList/shoppingList.component';
import { ShopListEditComponent } from './ShoppingList/shop-list-edit/shop-list-edit.component';
import { ShoppingListItemComponent } from './ShoppingList/shopping-list-item/shopping-list-item.component';

import { DropdownDirective } from './dropdownDirective/dropdown.directive';
import { RecipeBookService } from './recipeBook.service';
import { ShoppingListService } from './shoppingList.service';
import { GenericErrorPageComponent } from './generic-error-page/generic-error-page.component';
import { AppRoutingModule } from './app-routing.module';
import { HomePageComponent } from './home-page/home-page.component';
import { SelectARecipeComponent } from './recipeBook/select-a-recipe/select-a-recipe.component';
import { RecipeEditComponent } from './recipeBook/recipe-edit/recipe-edit.component';
import { AuthPageComponent } from './auth-page/auth-page.component';
import { SpinnerComponent } from './auth-page/spinner/spinner.component';
import { HttpInterceptorService } from 'src/app/httpInterceptor.service';
import { AuthGuardService } from './auth-guard.service';
import { AlertDynamicComponent } from './shared/alertVersaoNgIf (bem mais pratica)/alert.component';


import { PlaceholderDirective } from './placeholderDirective/placeholder.directive';
// import { AlertDynamicComponent } from './shared/alertVersaoNgIf (bem mais pratica)/alert.component';



@NgModule({
  declarations: [
    AppComponent,
    HeaderComponent,
    RecipeBookComponent,
    RecipeItemComponent,
    RecipeListComponent,
    RecipeDetailComponent,
    ShoppingListComponent,
    ShopListEditComponent,
    ShoppingListItemComponent,
    DropdownDirective,
    GenericErrorPageComponent,
    HomePageComponent,
    SelectARecipeComponent,
    RecipeEditComponent,
    AuthPageComponent,
    SpinnerComponent,
    AlertDynamicComponent,
    PlaceholderDirective
    // AlertDynamicComponent
  ],
  imports: [
    BrowserModule,
    ReactiveFormsModule,
    FormsModule, //lembre-se de adicionar isso se for usar 'ngModel()'..
    AppRoutingModule,  //módulo de routing, customizado por nós...
    HttpClientModule
  ],
  entryComponents: [   ///usado com o RENDER DE COMPONENTS DENTRO DE NOSSO CÓDIGO TS... --> ou seja, components que não vão usar um 'selector' para serem renderizados, nem o ROUTE CONFIG (paths e etc) para serem renderizados... eles vão simplesmente ser 'DROPPADOS' no código, por meio de uma directive especializada e por meio de uma 'ComponentFactory' própria...
  AlertDynamicComponent
],

  providers: [RecipeBookService, ShoppingListService,
    {
      provide: HTTP_INTERCEPTORS,
      useClass: HttpInterceptorService,
      multi: true
    }
  
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }















---------------------------------------






















ESSE É O NOSSO APP MODULE..










--> MAS É CLARO QUE ESSE NÃO É O ÚNICO MODULE USADO NO NOSSO PROJETO,


TEMOS ESTES:







  imports: [
    BrowserModule,
    ReactiveFormsModule,
    FormsModule, //lembre-se de adicionar isso se for usar 'ngModel()'..
    AppRoutingModule,  //módulo de routing, customizado por nós...
    HttpClientModule
  ],















  --------> TODAS AS COISAS QUE 



  EXISTEM/SÃO CRIADAS COM AQUELE DECORATOR DE 

  '@NgModule({})'


  SÃO MODULES..









  --> UM EXEMPLO DE MODULE DE NOSSO APP, FORA 'app',




  É 
  O 

  'app-routing.module.ts'...













  --. DENTRO DESSE ARQUIVO,

  TAMBÉM 

  ADICIONAMOS UM 

  'NgModule':







@NgModule({
  imports: [RouterModule.forRoot(appRoutes)],

  exports: [RouterModule],
})
export class AppRoutingModule {}















--> ISSO QEUR DIZER QUE 



USAMOS ESSES MODULES PARA 'SET SOMETHINGS UP '





E PARA AGRUPAR CERTAS COISAS EM 'BLOCOS'....















--> CERTO..








--> LÁ EM 'app.module.ts':









LÁ TEMOS UMA __ LOOONGA_ LISTA DE DECLARATIONS..









--> no FINAL DAS CONTAS,



'declarations'




É UM  __ ARRAY__ DE TODOS OS COMPONENTS,

DIRECTIVES 


E 

CUSTOM PIPES UTILIZADAS NO SEU APP...









--> TUDO ISSO PRECISA SER COLOCADO EM 'DECLARATIONS',


SENÃO NÃO PODEM SER USADAS NOS SEUS TEMPLATES OU ROUTES...










---> NÓS TAMBÉM TEMOS AQUELE ARRAY DE 'imports',






que é IMPORTANTE PQ TE DEIXA IMPORTAR OUTROS MODULES PARA DENTRO DO SEU MODULE...











declarations: [
    ExemploDeComponent
],


imports:[

    ExemploDeModule
]













-> O ARRAY DE 'imports'




É IMPORTANTE PQ TE DEIXA IMPORTAR OUTROS MODULES PARA DENTRO DESSE MODULE ESPECÍFICO...










--> É ASSIM QUE VOCÊ SPLITTA SEU APP EM MÚLTIPLOS MÓDULOS...






--> O ÚNICO MODULE CRIADO POR NÓS, ATÉ AGORA,

foi 

'AppRoutingModule'...








MAS USAMOS OS MODULES BUILT-IN 





de 'FormsModule'


e 



'BrowserModule'..








--> SE INSPECIONÁSSEMOS 

ESSES



MODULES,





VERÍAMOS 



o 

'@NgModule({})',






E LÁ 

DENTRO 






UM ARRAY DE 'declarations' 




COM __ TODAS AS FORM RELATED DIRECTIVES SUPORTADAS PELO ANGULAR (


    como o auto-detect de um FORM ELEMENT para 

    a criaçaõ de uma form com o 


    TEMPLATE-DRIVEN APPROACH,


    OU as directives de 'email' e 'required'...
)











--> E ESSES 'COMPILADÕES',



ESSES SÃO OS MODULES.. (aí você não precisa ir adicionando tudo isso, essas directives, individualmente)..








JÁ O 



ARRAY  DE 'providers'


É 





OUTRA COISA IMPORTANTE DE NOSSOS ARQUIVOS 'module',




PQ 



DENTRO 


DELE 

DEFINIMSO 


TODOS OS SERVICES QUE QUEREMOS PROVIDENCIAR 



,





que queremos usar no nosso app...










--> MAS O PROFESSOR FALARÁ DA RELAÇÃO ENTRE 'services' e 'modules'




MAIS TARDE,


PQ 


ESSE É UM TÓPICO 


+ OU - ESPECIAL,




pq 




não há uma noção como 



'''' 'VOCÊ SÓ PODE USAR 1 SERVICE DENTRO DO 

MODULE EM QEU VOCÊ 

O COLOCOU NO ARRAY DE 'providers' ''' 





(
    na verdade, esse nem sempre é o caso;

    muitas vezes 1 service é usado somente dentro de 1 único 

    module,

    mas essa não é uma regra absoluta..


)











-- MAS TODOS OS SERVICES QUE QUEREMOS USAR PRECISAM



SER ESPECIFICADOS  EM 'providers',



OU ENTAÕ 




escrever 


@Injectable({providedIn: 'root'})














-> já o 'BOOTSTRAP' array é 





IMPORTANTE PARA O _ START_ DO SEU APP,




PQ ELE DEFINE '''QUAL COMPONENT É 


DISPONÍVEL/AVAILABLE DIRETAMENTE 




NAQUELE ARQUIVO  'index.html' DO SEU PROJETo'''











--> tipicamente você terá só 1 coisa no seu 'bootstrap',



MAS VOCÊ PODERIA TER MÚLTIPLOS COMPONENTS... --> MAS CADA 



COMPONENT 

FICARIA 



BASICAMENTE 

'DETTACHED'



em relaçaõ aos outros components,




O QUE QUER DIZER QUE VOCê ACABARIA 



CRIANDO DIFERENTES 

'ROOT COMPONENT TREEs'


NO SEU APP,



O QUE 

DEIXARIA 

O TRABALHO 



COM ESSES COMPONENTS (ENTRE ELES )



bem mais difícil...









--> já o 'entryComponents'



É USADO 


PARA TODOS OS COMPONENTS QUE SÃO CRIADOS DENTRO DO CÓDIGO '.ts'( 


    deixa o 


    angular 'aware' desse component,

    quando ele for criado PROGRAMATICAMENTE...
)












-------> CONFORME O PROFESSOR MENCIONOU,


TEMOS 

O MODULE DE 'app-routing.module.ts',




QUE NO MOMENTO 



SÓ É RESPONSÁVEL PELO MANAGE 

DE 


NOSSA ROUTING CONFIGURATION --> E SÓ CRIAMOS ESSE ARQUIVO 



PARA CONSEGUIR UM OUTSOURCING,


PARA DEIXAR NOSSO ARQUIVO 'app.module.ts'



MAIS 'LEAN'...











--> E ESSA É UMA RAZÃO PARA SPLITTAR SEU CÓDIGO EM MÚLTIPLOS MODULES:



MANUTENÇÃO MAIS FÁCIL E MAIOR LEGIBILIDADE...









--> o 'app-routing.module.ts'




SIMPLESMENTE 

IMPORTA AQUELES NEGÓCIOS:







@NgModule({
  imports: [RouterModule.forRoot(appRoutes)],

  exports: [RouterModule],
})









IMPORTA O ROUTERMODULE DO ANGULAR,





E AÍ CONFIGURA 

NOSSO APP COM A NOSSA ROUTER CONFIG:







const appRoutes: Routes = [
  // {   ///approach que USA UMA HOME PAGE COMO ROUTE DE '/'...
  //   path: '',
  //   component: HomePageComponent,
  // },

  {////ordem das routes importa, exatamente como no REACT ROUTER
    
    path: '',
    redirectTo: '/recipe-book',
    pathMatch: 'full', /// (COMMON GOTCHA) evita o error de 'SEMPRE VAI REDIRECIONAR PARA ESSA ROUTE DE recipe-book' (pq o padrão é 'prefix' em vez de 'full'; ou seja, é o MESMO COMPORTAMENTO DEFAULT DO REACT ROUTER)...
  },
  {
    path: 'recipe-book',
    component: RecipeBookComponent,
    canActivate: [AuthGuardService], ////VAI REDIRECIONAR à 'auth', SE O USER NÃO ESTIVER AUTH....
    children: [
      {
        path: '',
        resolve: [RecipesResolverService],
        component: SelectARecipeComponent,
      },
      {
        path: 'new',

        component: RecipeEditComponent,
      },
      {
        path: ':id',
        resolve: [RecipesResolverService],
        component: RecipeDetailComponent,
      },

      {
        path: ':id/edit',
        resolve: [RecipesResolverService],
        component: RecipeEditComponent,
      },

      // {
      //     path: 'new-recipe',
      // }
    ],
  },

  {
    path: 'shop-list',
    component: ShoppingListComponent,
  },


  {

    path: 'auth',
    canActivate: [AuthGuardService], ////VAI REDIRECIONAR à '/recipe-book', SE O USER JÁ ESTIVER AUTHENTICATED...
    component: AuthPageComponent
  },

  {
    path: 'not-found',
    component: GenericErrorPageComponent,
    data: {
      message: 'The requested page could not be found.',
    },
  },
  {
    path: '**',
    redirectTo: '/not-found',
  },















  ISSO FEITO,


  ELE FAZ ALGO MT IMPORTANTE,


  QUE É __ EXPORTAR__ 


  ESSE 


  NOSSO MODULE,

  POR MEIO DISTO:






   exports: [RouterModule],











---> ESSE ROUTERMODULE (editado) 


É EXPORTADO 




PARA FORA DESSE ARQUIVO...














--> E ISSO É NECESSÁRIO, DEVE SER FEITO,


PQ 


'CADA MODULE TRABALHA POR CONTA PRÓPRIA (on its own) 


NO ANGULAR''' -------> ISSO QUER DIZER QUE 


SE VOCÊ 


DECLARAR 

1 COMPONENT 



EM 1


CERTO MODULE,




ESSE 





COMPONENT _ 




__ __ SÓ PODERÁ _ SER USADO __ 



NESSE 


MODULE ESPECÍFICO,




E EM MAIS NENHUM OUTRO LOCAL/MODULE...











--> ISSO QUER DIZER QUE SE IMPORTAMOS 'RecipeListComponent' DENTRO 




DO APP MODULE,



só VAMOS PODER ESCREVER O SELECTOR DELE 


__DENTRO _ DOS OUTROS CCOMPONENTS DECLARADOS EM 'declarations' do app module,






MAS 


SE TIVÉSSEMOS 





OUTROS MODULES NO NOSSO PROJETO,


NÃO SERIA POSSÍVEL 




IMPORTAR E USAR ESSES COMPONENTS (por meio de SELECTORS ou ROUTING) 




NESSES OUTROS MODULES...












VEREMOS ISSO LOGO LOGO...



 











 --> E DEVEMOS EXPORTAR NOSSO app-routing.module.ts 



 PARA QUE 


 ELE FIQUE DISPONÍVEL NO 'app.module.ts',






EM QUE 


ENTÃO IMPORTAMOS 


E O ESCREVEMOS EM 

'imports'...











--> E QUANDO IMPORTAMOS OUTROS MODULE,

IMPORTAMOS TODAS AS OUTRAS COISAS QUE AQUELE MODULE EXPORTA,







QUE __ NESSE CASO __ É O 

'CONFIGURED ROUTER MODULE',


com todas nossas routes.. --> e é por isso que 




NOSSO CONFIGURED ROUTER MODULE ACABA NO APP.module.ts,






E PQ 

PODEMOS O UTILIZAR LÁ..










E É ISSO QUE JÁ ESTAMOS FAZENDO, EM GERAL,



E O QUE JÁ ESTAMOS FAZENDO NO NOSSO APP...  --> IMPORTAMOS ESSES MODULES,



E TUDO FUNCIONA....














--> PARA APPS MENORES,




TUDO VAI FUNCIOANR ASSIM...








-> MAS CONFORME SEU APP CRESCE,



VOCê 

TALVEZ QUEIRA

SPLITTAR

SEU CÓDIGO,









PARA TER 'LEANER MODULES',



DE MAIS FÁCIL MANUTENÇÃO E COMPREENSÃO,


E TAMBÉM 


PARA 



AUMENTAR A PERFORMANCE.. --> 




O 


SPLIT DOS COMPONENTS 


DE SEU CÓDIGO 



NÕA É 




ALGO QUE TRAZ 



MELHORIA DE PERFORMANCE IMEDIATA, 

MAS É UM PRÉ-REQUISITO PARA TAL...
