











ANTES DE PROSSEGUIRMOS COM ''OPTIMIZAÇÕES NO LAZY LOADING'',





DEVEMOS TENTAR IMPLEMENTAR LAZY LOAADING POR CONTA PRÓPRIA,



APLICAR O LAZY LOADING AOS 





MODULES DE 'AUTH' 

E 


DE 

'SHOP-LIST'...









--> tentar fazer isso por conta própria...

















O SETUP NO 'app-routing.module.ts'



FICOU ASSIm:













    {
      path: '',
      redirectTo: '/recipe-book',
      pathMatch: 'full'
    },

    
    {path: 'recipe-book', 
              ////vocÊ deve escrever o PATH ATÉ O SEU ARQUIVO, e logo depois o '#NOME DA CLASS/MODULE DENTRO DESSE ARQUIVO' (é necessário especificar assim, para que isso funcione)...
    //  loadChildren: './recipeBook/recipe-book.module.ts#RecipeBookModule'       ////lazy loading   --> é o 'module' que você vai carregar de forma LAZY. (só quando o user acessar essa sua route, essencialmente)...
        ////SINTAXE VELHA DE 'loadChildren' ^^^


        ///SINTAXE NOVA VVVVVV 

        loadChildren: () => import('./recipeBook/recipe-book.module').then(x => x.RecipeBookModule)
  
  
  },



     
  {path: 'shop-list', 

loadChildren: () => import('./ShoppingList/shoppingList.module').then(x => x.ShoppingListModule)


} ,


    
{path: 'auth', 

loadChildren: () => import('./auth/auth.module').then(x => x.AuthModule)


}



















--> e isso está funcionando ATÉ MESMO COM O REDIRECT PARA A PAGE DE AUTH (Quando estamos unauth e tentamos acessar 'recipe-book'..)
















-> ok... consegui fazer isso funcionar com as 3 routes diferentes (shoplist, recipe-book e auth)..



















O CÓDIGO INTEIRO, PORTANTO, FICOU ASSIM:




















app.module.ts:













import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';

import { AppComponent } from './app.component';

import { HeaderComponent } from './headerComponent/headerComponent.app';

import { RecipeBookService } from './recipeBook.service';
import { ShoppingListService } from './shoppingList.service';
import { GenericErrorPageComponent } from './generic-error-page/generic-error-page.component';
import { AppRoutingModule } from './app-routing.module';
import { HomePageComponent } from './home-page/home-page.component';

import { HttpInterceptorService } from 'src/app/httpInterceptor.service';

import { SharedModule } from './shared/shared.module';

@NgModule({
  declarations: [
    AppComponent,
    HeaderComponent,

    GenericErrorPageComponent,
    HomePageComponent,
  ],
  imports: [BrowserModule, AppRoutingModule, HttpClientModule, SharedModule],

  providers: [
    RecipeBookService,
    ShoppingListService,
    {
      provide: HTTP_INTERCEPTORS,
      useClass: HttpInterceptorService,
      multi: true,
    },
  ],
  bootstrap: [AppComponent],
})
export class AppModule {}



















app.routing-module.ts:














import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

const appRoutes: Routes = [
  {
    path: '',
    redirectTo: '/recipe-book',
    pathMatch: 'full',
  },

  {
    path: 'recipe-book',

    loadChildren: () =>
      import('./recipeBook/recipe-book.module').then((x) => x.RecipeBookModule),
  },

  {
    path: 'shop-list',

    loadChildren: () =>
      import('./ShoppingList/shoppingList.module').then(
        (x) => x.ShoppingListModule
      ),
  },

  {
    path: 'auth',

    loadChildren: () => import('./auth/auth.module').then((x) => x.AuthModule),
  },
];

@NgModule({
  imports: [RouterModule.forRoot(appRoutes)],

  exports: [RouterModule],
})
export class AppRoutingModule {}






















AGORA NOSSOS FEATURE MODULES:








// import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';

import { RecipeBookRoutingModule } from './recipe-book-routing.module';
import { RecipeBookComponent } from './recipe-book.component';
import { RecipeDetailComponent } from './recipe-detail/recipe-detail.component';
import { RecipeEditComponent } from './recipe-edit/recipe-edit.component';
import { RecipeItemComponent } from './recipe-list/recipe-item/recipe-item.component';
import { RecipeListComponent } from './recipe-list/recipe-list.component';
import { SelectARecipeComponent } from './select-a-recipe/select-a-recipe.component';

import { SharedModule } from '../shared/shared.module';

@NgModule({
  declarations: [
    RecipeBookComponent,
    RecipeDetailComponent,
    RecipeBookComponent,
    SelectARecipeComponent,
    RecipeEditComponent,
    RecipeListComponent,
    RecipeItemComponent,
  ],
  providers: [],
  imports: [SharedModule, ReactiveFormsModule, RecipeBookRoutingModule],
  exports: [],
})
export class RecipeBookModule {}


















E:










// import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { SharedModule } from '../shared/shared.module';
// import { RouterModule } from '@angular/router';
import { ShopListEditComponent } from './shop-list-edit/shop-list-edit.component';
import { ShoppingListItemComponent } from './shopping-list-item/shopping-list-item.component';
import { ShoppingListRoutingModule } from './shoppingList-routing.module';
import { ShoppingListComponent } from './shoppingList.component';

@NgModule({
  declarations: [
    ShoppingListComponent,
    ShoppingListItemComponent,
    ShopListEditComponent,
  ],
  imports: [
    // CommonModule, 
    FormsModule, 
    ShoppingListRoutingModule,
    SharedModule/// isso deve ser importado aqui e TAMBÉM EM 'app.module.ts'....
  
  ]



})
export class ShoppingListModule {}














E:














import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { SharedModule } from '../shared/shared.module';
import { AuthPageComponent } from './auth-page.component';
import { AuthRoutingModule } from './auth-routing.module';

@NgModule({
  declarations: [AuthPageComponent],

  imports: [
    FormsModule,
    SharedModule, //usamos o spinner
    AuthRoutingModule,
    CommonModule, //obrigatório..
  ],
  exports: [AuthPageComponent, FormsModule],
})
export class AuthModule {}























-> É CLARO QUE O EFEITO DE LAZY LOADING SE TORNA MAIOR DE ACORDO COM O TAMANHO DO SEU APP... 