








VAMOS COMEÇAR COM O ADD DE 'EFFECTS'...








-> vamos começar com o ADD DE UM 'LOGIN EFFECT',






que 

FARÁ ESSENCIALMENTE O SEND DE UM HTTP REQUEST DE LOGIN,


que liberará a lógica de nossas actions em relaçaõ ao reducer..











-----> LOGIN EFFECT..








--> DEPOIS ADICIONAREMOS SIGNUP e etc..




















--> VOU CRIAR 1 CÓPIA DO MEU PROJETO DE AGORA, chamada de 'app3-ServicesComoHandlersDeSideEffects'







e aí essa versão 'LEGIT',


que terá 


O NGRX + SIDE EFFECTS HANDLADOS PELO NGRX/effects,



terá o nome de 'app' normal....












OK... O CÓDIGO ATUAL DE 'login',




lá em 'auth.service.ts',



ESTÁ ASSIm>:



























import { HttpClient, HttpResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';

import { HttpHeaders } from '@angular/common/http';

// import { HttpParams } from '@angular/common/http';
import { Router } from '@angular/router';

import { environment } from '../../environments/environment'

exhaustMap

import { BehaviorSubject, 
  catchError, //ESSE OPERATOR É MELHOR, FAZ O HANDLE DE OBJECTS DE 'ERROR' (error responses dos nossos http requests) mais adequadamente..


   exhaustMap, /////////este operator é usado para cases em que você tem um SUBSCRIBE DENTRO DE OUTRO SUBSCRIBE..
  Subject, 
  tap } from 'rxjs'; 
import { throwError } from 'rxjs'; ////esse operator funciona conjuntamente com 'catchError'....
import { User } from './user.model';
import { Store } from '@ngrx/store';
import { AppState } from '..';


import * as fromAuthActions from './store/authActions';

export interface AuthResponseData {
  kind: string;
  email: string;
  refreshToken: string;
  idToken: string;
  localId: string;
  expiresIn: string;
  registered?: boolean; ///será um field opcional... existirá na response de 'SIGNUP', mas não existirá na response de 'LOGIN'...
}

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  // user = new Subject(); ////vamos usar esse subject PARA _ ARMAZENAR NOSSA 'USER DATA' obtida lá das routes de login/signup DENTRO DO BROWSER DO USER, PARA QUE POSSA SER USADA EM TODOS OS REQUESTS, PARA FINS DE AUTHENTICATION E ACESSO A PROTECTED ROUTES...

  // token: string | null = null;   //não usamos esse approach, e sim o BEHAVIORSUBJECT...




    ////COM O NGRX, NÃO PRECISAMOS MAIS DESSE SUBJECT...
  // user = new BehaviorSubject<User | null>(null);  ////vamos usar esse  __TIPO ESPECIAL _  DE SUBJECT PARA _ ARMAZENAR NOSSA 'USER DATA' obtida lá das routes de login/signup DENTRO DO BROWSER DO USER, PARA QUE POSSA SER USADA EM TODOS OS REQUESTS, PARA FINS DE AUTHENTICATION E ACESSO A PROTECTED ROUTES...



  ///behaviorSubject's são parecidos com Subjects comuns, mas a diferença é que ele vai 'catch' as datas emitidas nos seus 'subscribe' ATÉ MESMO _ DEPOIS_ DA DATA PERTINENTE TER SIDO EMITIDA (quer dizer que seu efeito é '''atrasado''', em outras palavras, pq ele vai catch a data imediatamente, até mesmo DEPOIS DE ELA TER SIDO EMITIDA, pega o RESÍDUO do emit, basicamente)...
///e vamos usar o value inicial de 'null', para essa data retornada por esse subject...



  tokenExpirationTimer: any;



  constructor(private http: HttpClient, private router: Router, private store: Store<AppState>) {}

  onCreateAccount(authData: {
    email: string;
    password: string;
    returnSecureToken: boolean;
  }) {
    const requestHeaders = new HttpHeaders();

    requestHeaders.append('Content-Type', 'application/json');
    
    // requestHeaders.append('Content-Type', 'application/json');

    return this.http
      .post<AuthResponseData>(
        // // 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDJgmB6dgifUuTeYPm1MLeJ7Jh93spUKtg',  ///VERSÃO _ DUMMY__ (sem authentication rules no firebase)
        // 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBK3AXsu9Gn0fqLmA0zOdUAknDM48Nwk_o', ////VERSÃO COM AUTHENTICATE, DEPLOY
        `https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${environment.firebaseAPIKey}`,

        authData,
        {
          headers: requestHeaders,
        }
      )
      .pipe(
        catchError(
          //vamos usar esse operator para MANIPULAR NOSSAS 'ERROR RESPONSES', QUANDO OCORREREM..
          (errorRes) => {
            console.log(errorRes);
            let errorMessage = 'An unknown error has occured.';

            if (!errorRes.error || !errorRes.error.error) {
              //conserta o choro do typescript..
              return throwError(() => errorMessage); /////vai dar throw da message de 'An unknown error occurred!'
            }

            switch (errorRes.error.error.message) {
              case 'EMAIL_EXISTS':
                errorMessage = 'This email already exists.';
            }

            return throwError(() => errorMessage);
          }
        ),

        tap(
          
        //   (responseData) => {
        //   ////é aqui que fazemos o STORAGE de nossa 'user auth data' LÁ NO LOCAL STORAGE DO USER (storage de token e etc)....

        //   const { email, localId, expiresIn, idToken } = responseData;

        //   const expirationDate = new Date( /// vai nos dar um object 'Date'...
        //     new Date().getTime() + +expiresIn * 1000
        //   );

        //   const newUser = new User(email, localId, idToken, expirationDate);

        //   this.user.next(newUser); ///fazemos NEXT de nosso user NO SUBJECT, para que essa mudança de user data SEJA _ TRANSMITIDA AO LOGNO DO NOSSO APP..
        // }
        
        (responseData) => {
    
          // this.storeUserToken(responseData); ///CÓDIGO SEM NGRX....
          // this.emitUser(responseData);
          // this.autoLogout(+responseData.expiresIn);


                                    ///CÓDIGO COM NGRX....


                this.handleUser(responseData);
        }
        
        )
      );

    // .subscribe((responseData) => {
    //   console.log(responseData);

    // });
  }

  onLogin(authData: {
    email: string;
    password: string;
    returnSecureToken: boolean;
  }) {
    const requestHeaders = new HttpHeaders();

    requestHeaders.append('Content-Type', 'application/json');

    return this.http
      .post<AuthResponseData>(
        // <{expiresIn: number, idToken: string, expirationDate: string, localId: string, email: string}>

        // // 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDJgmB6dgifUuTeYPm1MLeJ7Jh93spUKtg', //VERSÃO DUMMY (sem authentication rules no firebase)
        // 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBK3AXsu9Gn0fqLmA0zOdUAknDM48Nwk_o', ////VERSÃO COM AUTHENTICATE, DEPLOY

        `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${environment.firebaseAPIKey}`,
        authData,

        {
          headers: requestHeaders,
        }
      )
      .pipe(
        catchError((errorRes) => {
          console.log(errorRes);

          let errorMessage = 'An unknown error has occured.';

          switch (errorRes.error.error.message) {
            case 'EMAIL_NOT_FOUND':
              errorMessage = 'No user found for the entered email!';
              break;
            case 'INVALID_PASSWORD':
              errorMessage = 'Invalid password, please try again.';
          }

          return throwError(() => errorMessage);
        }),

        tap(
          (responseData) => {
            
            // const expirationDate = new Date(new Date().getTime() + +responseData.expiresIn * 1000); ////lembre-se de adicionar '* 1000', pois o JAVASCRIPT SEMPRE CONSIDERA 'TEMPO' EM MILISSEGUNDOS, E NÃO EM SEGUNDOS.... (só o 'expiresIn' que é mostrado em segundos....)
            // localStorage.setItem('token', responseData.idToken);
            // localStorage.setItem('expirationDate', expirationDate.toString());
            // localStorage.setItem('userId', responseData.localId);
            // localStorage.setItem('email', responseData.email );
            console.log(+responseData.expiresIn);
     
            // this.emitUser(responseData);  //trocamos pelo method que altera o STATE DO NGRX... (method de baixo)
            this.handleUser(responseData);
            this.storeUserToken(responseData);
            this.autoLogout(+responseData.expiresIn);
          }
        )
      );
    // .subscribe(
    //   (responseData) => {
        // console.log(responseData);
        // const expirationDate = new Date(new Date().getTime() + responseData.expiresIn * 1000); ////lembre-se de adicionar '* 1000', pois o JAVASCRIPT SEMPRE CONSIDERA 'TEMPO' EM MILISSEGUNDOS, E NÃO EM SEGUNDOS.... (só o 'expiresIn' que é mostrado em segundos....)
        // localStorage.setItem('token', responseData.idToken);
        // localStorage.setItem('expirationDate', expirationDate.toString());
        // localStorage.setItem('userId', responseData.localId);
        // localStorage.setItem('email', responseData.email )

    //     this.router.navigate(['/recipe-book'])
    //   }
    // )
  }











  private storeUserToken(responseData: AuthResponseData) {

    const expirationDate = new Date(new Date().getTime() + +responseData.expiresIn * 1000); ////lembre-se de adicionar '* 1000', pois o JAVASCRIPT SEMPRE CONSIDERA 'TEMPO' EM MILISSEGUNDOS, E NÃO EM SEGUNDOS.... (só o 'expiresIn' que é mostrado em segundos....)
    // localStorage.setItem('token', responseData.idToken); ///versão que usei no REACT.
    // localStorage.setItem('expirationDate', expirationDate.toString());
    // localStorage.setItem('userId', responseData.localId);
    // localStorage.setItem('email', responseData.email );


      ///versão que uso no ANGULAR
    const userObject = {
      token: responseData.idToken,
      expirationDate: expirationDate.toString(),
      userId: responseData.localId,
      email: responseData.email
      
    }


    localStorage.setItem('userData', JSON.stringify(userObject))


  }



    //method bem importante.
  // autoLogin() {  ////sem o uso de NGRX.


  //   const userData = JSON.parse(localStorage.getItem('userData')!); ///O VALUE QUE VAMOS RETRIEVAR LÁ DO LOCAL STORAGE DEFINITIVAMENTE SERÁ UMA STRING, por isso usamos 'JSON.parse()' para converter essa string (json data) em um OBJECT JAVASCRIPT 


  //   if (!userData) { ///case em que NÃO TEMOS TOKEN ALGUMA/token inválida no local storage..
  //     return; 
  //   }



  //   const loadedUser = new User(userData.email, userData.userId, userData.token!, new Date(userData.expirationDate));


  

  //   if(loadedUser.token) { ////com isso, através do GETTER de 'loadedUser.token' (pq nosso model de 'User' tem esse getter), _ CHECAMOS _ SE EXISTE UM VALID TOKEN DENTRO DESSE NOSSO USER (caso não exista, o getter retornará 'null' --> isso pq NULL É UM FALSY VALUE, e tiramos vantagem disso nesse if block aqui...)...


  //     console.log(typeof userData.expirationDate);
  //     const expirationDuration = Date.parse(userData.expirationDate) - new Date().getTime();  ///coloquei o '/1000' pq esse value deve entrar COMO SECONDS, lá nessa nossa function de 'authLogout()'..
       
  //     ////se nosso token no localStorage for VÁLIDO, vai fazer forward dessa info a TODOS OS COMPONENTS DE NOSSO APP, por meio desse forward de 'loadedUser', autenticando nosso user, essencialmente...
  //   this.user.next(loadedUser);  ////vai reatualizar a UI DE NOSSO APP com esse user que vai ser fetcheado da data inserida no local storage(é o 'auto-login', presente quando sempre recarregamos nossa page..)


  //   console.log(expirationDuration / 1000);

  //   this.autoLogout(expirationDuration/1000);
  //   }

  // }





  autoLogin() { ///COM O USO DE NGRX...


    const userData = JSON.parse(localStorage.getItem('userData')!); ///O VALUE QUE VAMOS RETRIEVAR LÁ DO LOCAL STORAGE DEFINITIVAMENTE SERÁ UMA STRING, por isso usamos 'JSON.parse()' para converter essa string (json data) em um OBJECT JAVASCRIPT 


    if (!userData) { ///case em que NÃO TEMOS TOKEN ALGUMA/token inválida no local storage..

      console.log('entered');
      return; 
    }



    const loadedUser = new User(userData.email, userData.userId, userData.token!, new Date(userData.expirationDate));


  

    if(loadedUser.token) { ////com isso, através do GETTER de 'loadedUser.token' (pq nosso model de 'User' tem esse getter), _ CHECAMOS _ SE EXISTE UM VALID TOKEN DENTRO DESSE NOSSO USER (caso não exista, o getter retornará 'null' --> isso pq NULL É UM FALSY VALUE, e tiramos vantagem disso nesse if block aqui...)...


      console.log(typeof userData.expirationDate);
      const expirationDuration = Date.parse(userData.expirationDate) - new Date().getTime();  ///coloquei o '/1000' pq esse value deve entrar COMO SECONDS, lá nessa nossa function de 'authLogout()'..
       
      
    this.store.dispatch(new fromAuthActions.AuthSuccess(loadedUser)) //// VERSÃO DO NGRX


    console.log(expirationDuration / 1000);

    this.autoLogout(expirationDuration/1000);
    }

  }





  // private emitUser(responseData: AuthResponseData | null) {  ///VERSÃO _ SEM NGRX (uso de subjects, emit de nosso object 'user' por meio do BehaviorSubject)....




  //   if (responseData === null)  {

  //    return  this.user.next(null);
  //   }



  //   const { email, localId, expiresIn, idToken } = responseData;

  //         const expirationDate = new Date( /// vai nos dar um object 'Date'...
  //           new Date().getTime() + +expiresIn * 1000
  //         );

  //         const newUser = new User(email, localId, idToken, expirationDate);

  //         this.user.next(newUser); 
  // }


  private handleUser(responseData: AuthResponseData | null) {  ///VERSÃO _ COM NGRX (deixamos nosso behavior subject de lado) --> aqui, vamos fazer o DISPATCH DE UMA ACTION, ACTION QUE VAI ALTERAR NOSSO 'STATE' DE 'auth', o QUE POR SUA VEZ VAI INFFLUENCIAR TODOS OS LUGARES DE NOSSO APP VINCULADOS A ESSE STATE (handlando nossa authentication, em outras palavras)...
    
    if (responseData === null)  {

    //  return  this.user.next(null);

    this.store.dispatch(new fromAuthActions.AuthLogout());
    } else {



    const { email, localId, expiresIn, idToken } = responseData;

          const expirationDate = new Date( /// vai nos dar um object 'Date'...
            new Date().getTime() + +expiresIn * 1000
          );

          const newUser = new User(email, localId, idToken, expirationDate);

          // this.user.next(newUser); 

          this.store.dispatch(new fromAuthActions.AuthSuccess(newUser))
    }
  }









  logoutUser() {
    // localStorage.removeItem('token');
    // localStorage.removeItem('userId');
    // localStorage.removeItem('expirationDate');
    // localStorage.removeItem('email');
    


    // this.emitUser(null); //Agora usamos o method do NGRX, 'handleUser'... (criei para fazer o dispatch de actions, especificamente)...

    this.handleUser(null);

    // localStorage.removeItem('userData'); //agora faço isso na própria action, não precisa ser aqui....

    this.router.navigate(['/auth']);


    if (this.tokenExpirationTimer) {   ///'cleanup' de nosso timer de 'autologout' (em caso de tokens expiradas), CUJO TIMER NÃO VAI DEIXAR DE EXISTIR SOZINHO.. (precisamos limpar manualmente, com 'clearTimeout()')....

      clearTimeout(this.tokenExpirationTimer);
    }

    this.tokenExpirationTimer = null; ///resettamos o state de nosso 'tokenExpirationTimer' property...


  
  }






  autoLogout(expirationTime: number) {  //define um TIMER para então FAZER LOGOUT do user (quando o tempo acabar).... em milissegundos...

  this.tokenExpirationTimer = setTimeout(
       () => {

        this.logoutUser();


       },
       expirationTime * 1000  ///vai transformar isso, nossos segundos, em MILISSEGUNDOS...

     );

  }





}

























-----> OK... MAS O PROFESSOR VAI QUERER CRIAR UM NOVO AQRUIVO,



de nome 



'auth.effects.ts'... (será criado dentro da 'STORE' de authReducer)....












DENTRO DESSE ARQUIVO, A PRIMEIRA COISA QUE FAREMOS É EXPORTAR UMA CLASS NORMAL...









--> TODOS SEUS EFFECTS SERÃO ORGANIZADOS EM 'CLASSES'....

















--> vamos escrever 












export class AuthEffects {


}















--> E DENTRO DESSA CLASS,



A PRIMEIRA COISA QUE FAREMOS  _É O _ INJECT__ DE ALGUMA COISA...







--> ESSA 'COISA' 

VIRÁ 


LÁ DA PACKAGE DE 

'@ngrx/effects'...






--> ESSE 'algo' 

SERÁ 


'Actions'...








TIPO ASSIM:











import { Actions } from '@ngrx/effects';











---> 'Action' JÁ TINHA SIDO IMPORTADO LÁ DE '@ngrx/store' 


NO PASSADO, PARA O CREATE DE NOSSAS ACTIONS,





MAS __ 'Actions' AQUI 


É ALGO DIFERENTE,

SERÁ UM _ TIPO _ DIFERENTE DE OBJECT....










EX:














import { Actions } from "@ngrx/effects";  /// é diferente de 'Action' lá de @ngrx/store....





export class AuthEffects {

    
}



















--> CERTO...  E O QUE ESSE 'AuthEffects'


NOS DEIXA 

FAZER _ _É _ INJECt__ ACTIONS..












-----> para injetar actions nesse effect/effects,


voCê deve escrever assim:







export class AuthEffects {
  constructor(private actions) {}
}





--> a convenção,



aqui,



É  __SEMPRE _ ESCREVER 







UM '$' (dollar sign) 


AO FINAL 



DO NAME DESSA INJECTION,



MAS ESSA É APENAS UMA CONVENÇÃO..








vai ficando tipo assim:





export class AuthEffects {
  constructor(private actions$) {}
}














----------> CERTO.... E 'actions$'

será realmente de type 'Actions',



MAS O QUE DIABOS É 'Actions?'















--> 'Actions' É UM _ OBSERVABLE GRANDÃO 


QUE _ 


VAI TE DAR __ ACESSO _ 

A 



'''TODAS AS DISPATCHED ACTIONS''




de seu app,


PARA QUE VOCê 

POSSA 

'REACT TO THEM',






MAS REAGIR DE FORMA 



UM POUCO DISTINTA DAQUELA OBSERVADA NO REDUCER (


  pq no reducer vocÊ, obviamente,



  TAMBÉM 


  _ GANHA _ ACESSO àS 'dispatched actions'..
)












-> MAS AQUI, NESSA CLASS DE 'effects',


A 


IDEIA 
 


 É QUE __ VOCê __ NÃO VAI MUDAR QUALQUER STATE DO SEU APP,


E SIM 

QUE VAI PODER EXECUTAR 




'''QUALQUER OUTRO CÓDIGO QUE 


DEVERIA ACONTECER QUANDO UMA 


ACTION DESSAS FOR DISPATCHEADA'''' -----> e aí, então,



VOCê PODE SIMPLESMENTE FAZER O DISPATCH _ DE UMA __ NOVA ACTION_,




assim que 

ESSE CÓDIGO (código do AUTHEFFECTS, que PODERÁ SER ASYNC, SIM) 


tiver 


ACABADO...










------------------. OK... ISSO QUER DIZER QUE 'actions$' 


É SIMPLESMENTE UMA 'STREAM DE DISPATCHED ACTIONS'...










-> E, NOVAMENTE, USAR AQUELE DOLLAR SIGN 


é 


OPCIONAL... ---> ALGUMAS PESSOAS GOSTAM DE ADICIONAR UM '$' 


DO LADO DE TODO 'OBSERVABLE',


TUDO PARA QUE FIQUE BEM CLARO QUE ESSE NEGÓCIO É UM OBSERVABLE...










--> E EM MUITOS DOS OFFICIAL DOCS,


VOCê


VERÁ 


esse '$' ao final,


especialmente para as actions.. (mas não é obrigatório)..












OK, COM AS ACTIONS INJETADAS AÍ,


PODEMOS 


REGISTRAR _ NOSSO PRIMEIRO 'EFFECT'.. -----> O NOSSO PRIMEIRO EFFECT,




COMO QUASE TODOS OUTROS EFFECTS,


SERÁ 





UMA ESPÉCIE DE 'ACTION HANDLER',

por assim dizer...










-> VOCê PODE ADICIONAR UM NOVO __ EFFECT,



NA CLASS DE 'AuthEffects',



COMO SE FOSSE UMA NOVA PROPRIEDADE...






uma propriedade normal.... 



EX:



export class AuthEffects {


  authLogin = 


  constructor(private actions$) {}
}










-> o professor chama 


essa propriedade/effect de 'authLogin'  --> SUA PROPRIEDADE DEVE DESCREVER 'QUE TIPO DE 


EFFECT ELA VAI HANDLAR'...










--> OK..







DENTRO DESSA PROPRIEDADE,



O PROFESSOR ASSIGNA UM VALUE,






E 



ESSE VALUE SERÁ DE 'this.actions'...









-> OU SEJA,

ESTAMOS NOS REFERINDO à PROPRIEDADE QUE RECÉM FOI INJETADA,

aquela 



'actions$'...






------> OK... MAS COMO O PROFESSOR HAVIA MENCIONADO ANTERIORMENTE,




'actions$'




É UM _ OBSERVABLE...












EX:





















import { Actions } from "@ngrx/effects";  /// é diferente de 'Action' lá de @ngrx/store....





export class AuthEffects { //aqui vamos definir os possíveis effects dessa feature de nosso app... (side-effects, como send de http requests, etc)...



    authLogin = this.actions$

    constructor(private actions$: Actions) {  //// a naming convention é realmente usar 'actions$' ($ ao final)  ---> uma das naming conventions é nomear TODOS OS OBSERVABLES DO ANGULAR Com '$' AO FINAL...

    }



    
}















------> OK...... COMO 




ESSE 'this.actions$'


É UM __ OBSERVABLE,

SOMOS CAPAZES DE CHAMAR '.pipe()" 



e '.subscribe()"



EM CIMA DELE....








-------> MAS É _ CLARO QUE VOCe^NÃO DEVE CHAMAR '.subscribe()'







NO VALUE DESSA PROPRIEDADE/EFFECT,







PQ _ O 

NGRX EFFECTS 







_ JÁ _ VAI 
 FAZER SUBSCRIBE __ PARA NÓS....








 EM VEZ DISSO,


 VOCê DEVE CHAMAR 'pipe()'......










 ------> E A COISA QUE VOCê VAI TER QUE 'pipe()"


 DENTRO DESSE PIPE,




 SERÁ UM 



OPERATOR ESPECIAL RXJS,









OPERADOR QUE NÃO FAZ PARTE DO 'RXJS',







E SIM  QUE __ 







É _ PROVIDENCIADO 








PELO 




NGRX/effects... ---->  







É O OPERATOR DE 'ofType'...








EX:









import { Action, ofType } from '@angular/effects;'



















--> O CALL DE 'ofType'

FICA SIMPLESMENTE ASSIM:









import {Action, ofType} = '@angular/effects';





authLogin = this.acions.pipe(ofType())














-----> OK... 'ofType' é um OPERATOR ESPECIAL...







--> ESSE ofType




SIMPLESMETE 'TE DEIXA DEFINIR 1 FILTER PARA '''QUAIS TIPOS DE EFFECTS
VOCê 

VAI QUERER CONTINUAR QUE 

SIGAM EXISTINDO NESSE OBSERVABLE PIPE que vocE está criadno.

















EX:









    authLogin = this.actions$.pipe(   ///'actions$'é um observable, mas O NGRX _ NOS DEIXA _ FICAR 'SEM FAZER SUBSCRIBE A ELE', PQ O SUBSCRIBE É AUTOMÁTICO com ele...

    pip
    )
















    OFTYPE SIMPLESMENTE TE DEIXA DEFINIR UM __ FILTEr_ PARA 


    '''QUE TIPOS DE EFFECTS''''



    VOCê 

    VAI QUERER  ficar/continuar 



    DENTRO 


    DESSE 'OBSERVABLE PIPE'
     
     que vocÊ 



     está criando  (

      dentro desse OBSERVABLE STREAM....
     )













--> O OFTYPE existe/é útil pq 



VOCÊ 




PODE JUSTAMENTE _DEFINIR MAIS DE 1 'EFFECT' DENTRO 

DESSA 



CLASS DE 'AuthEffects',










E VOCÊ PODE DEFINIR 


SIMPLESMENTE_ DIFERENTES  TIPOS DE EFFECTS,





EFFECTS QUE VOCê VAI QUERER HANDLAR EM CADA 'CHAIN',


dependendo do que acontece no seu app.
















--> AQUI, POR EXEMPLO,




PODERÍAMOS HANDLAR O 'LOGIN EFFECT',



ou, para sermos mais precisos,

a 

'LOGIN ACTION',









pq 






ESSE 'authLogin' é um EFFECTT_ QUE _ 'REAGE'



_ à DISPATCHED ACTION DE 'login' (se codarmos que deve reagir somente  a isso)..
























--> certo.... e 'ofType', conforme  mencionado,



É UM _ FILTEr_ QUE _ NOS DEIXA DEFINIR '''PARA QUAIS ACTIONS EXATAMENTE DEVEMOS 


CONTINUAR A FICAR NESSA CHAIN'...











-> OK... MAS AGORA, NO CASO,

VAMOS PRECISAR DE __ MAIS ACTIONS... 











-> ISSO PQ ATÉ AGORA, O PROFESSOR SÓ TEM 'AUTH_LOGIN' E 'AUTH_LOGOUT'...









----> MAS AGORA, COMO QUEREMOS __ ACTUALLY_ ENVIAR _ UM HTTP REQUEST 


DE DENTRO DO NOSSO 'authEffect',









NÓS _ PRECISAMOS _ DE UM _ NOVO IDENTIFIER,



QUE NESSE CASO 




PODE SER 'AUTH_START'....






ex:











import { Action } from '@ngrx/store';
import { User } from '../user.model';

export const AUTH_START = '[Auth] AUTH_START';

export const AUTH_FAIL = '[Auth] AUTH_FAIL';

export const AUTH_SUCCESS = '[Auth] AUTH_SUCCESS';

export const AUTH_LOGOUT = '[Auth] AUTH_LOGOUT';

export class AuthStart implements Action {
  readonly type = AUTH_START;

  constructor() {}
}

export class AuthFail implements Action {
  readonly type = AUTH_FAIL;

  constructor(private payload: string) {} ////vai segurar 'error', que será uma STRING (ou um object error).
}

export class AuthLogout {
  readonly type = AUTH_LOGOUT;
  ///temos que remover os items no localStorage, por meio de algum helper method, no reducer...
}

export class AuthSuccess implements Action {
  readonly type = AUTH_SUCCESS;

  constructor(public payload: User) {}
}

export type AuthActions = AuthStart | AuthFail | AuthLogout | AuthSuccess;
















-------> OK...









AUTH_START,


no entanto,

será 1 ponto em que 


VAMOS QEURER 


'COMEÇAR A ENVIAR NOSSO HTTP REQUEST.'..















-> PARA CONSEGUIRMOS DEFINIR ESSE 'AUTH_START'



COMO __ _ESTOPIM_ PARA 



o 




start do código de side effects de 'authLogin', em 'authEffects',











O PROFESSOR DIZ QUE DEVEMOS IMPORTAR ESSA ACTION LÁ EM 'auth.effects.ts',

TIPO ASSIM:












import { Actions } from "@ngrx/effects";  /// é diferente de 'Action' lá de @ngrx/store....


import { ofType } from "@ngrx/effects";   //'ofType 'é um _ OPERATOR _ _FORNECIDO PELO NGRX (e não pelo rxjs)... --> é usado para 'FILTRAR' as actions que interessam/triggam cada 1 de nossos effects...
import { AuthStart } from "./authActions";




import * as AuthActions from '../store/authActions';




export class AuthEffects { //aqui vamos definir os possíveis effects dessa feature de nosso app... (side-effects, como send de http requests, etc)...


        ///esse é nosso PRIMEIRO EFFECT...
    authLogin = this.actions$.pipe(   ///'actions$'é um observable, mas O NGRX _ NOS DEIXA _ FICAR 'SEM FAZER SUBSCRIBE A ELE', PQ O SUBSCRIBE É AUTOMÁTICO com ele...


    )

    constructor(private actions$: Actions) {  //// a naming convention é realmente usar 'actions$' ($ ao final)  ---> uma das naming conventions é nomear TODOS OS OBSERVABLES DO ANGULAR Com '$' AO FINAL...
 
    }



    
}














--> OK... COM ISSO, COM ESSA ACTION, PODEMOS 


ESCREVER ASSIm:





ofType(AuthActions.AUTH_START)











-> O QUE ISSO FARÁ, ESSENCIALMENTE, É DIZER 

'''APENAS CONTINUE NESSA OBSERVABLE CHAIN 


SE _ A ACTION A QUE ESTAMOS REAGINDO, AQUI, É 


DE TIPO 


'AUTH_START''''...







ex:







import { Actions } from '@ngrx/effects';

import { ofType } from '@ngrx/effects';
import { AuthStart } from './authActions';

import * as AuthActions from '../store/authActions';

export class AuthEffects {
  authLogin = this.actions$.pipe();

  constructor(private actions$: Actions) {}
}












EX:











  authLogin = this.actions$.pipe(


    ofType(AuthActions.AUTH_START)

  );















--> ISSO QUER DIZER QUE, COM A AJUDA DESSE OPERATOR,


TODAS AS 'OUTRAS ACTIONS'

NUNCA VÃO TRIGGAR ESSE NOSSO EFFECT AÍ...









EX:









export class AuthEffects { //aqui vamos definir os possíveis effects dessa feature de nosso app... (side-effects, como send de http requests, etc)...


        ///esse é nosso PRIMEIRO EFFECT...
    authLogin = this.actions$.pipe(   ///'actions$'é um observable, mas O NGRX _ NOS DEIXA _ FICAR 'SEM FAZER SUBSCRIBE A ELE', PQ O SUBSCRIBE É AUTOMÁTICO com ele...




    ofType(AuthActions.AUTH_START)   ////com isso, dizemos que 'APENAS AS ACTIONS DE TYPE AUTH_START DISPATCHEADAS' é que vão __TRIGGAR_ ESSE NOSSO EFFECT DE 'Authlogin'...

    )

    constructor(private actions$: Actions) {  //// a naming convention é realmente usar 'actions$' ($ ao final)  ---> uma das naming conventions é nomear TODOS OS OBSERVABLES DO ANGULAR Com '$' AO FINAL...
 
    }



    
}



















----> E SE VOCÊ QUER 'RODAR ESSE CÓDIGO_ 


A PARTIR _DE MAIS DE 1 TIPO DE ACTION',


você 

pode fazê-lo;



pode enumerar as actions que 




vão ser TRIGGERS para o execute desses side effects...










--> OK...











export class AuthEffects { //aqui vamos definir os possíveis effects dessa feature de nosso app... (side-effects, como send de http requests, etc)...






        ///esse é nosso PRIMEIRO EFFECT...
    authLogin = this.actions$.pipe(   ///'actions$'é um observable, mas O NGRX _ NOS DEIXA _ FICAR 'SEM FAZER SUBSCRIBE A ELE', PQ O SUBSCRIBE É AUTOMÁTICO com ele...




    ofType(AuthActions.AUTH_START),  ////com isso, dizemos que 'APENAS AS ACTIONS DE TYPE AUTH_START DISPATCHEADAS' é que vão __TRIGGAR_ ESSE NOSSO EFFECT DE 'Authlogin'...

    switchMap(  ////nos deixa CRIAR UM NOVO OBSERVABLE, A PARTIR DA DATA DE UM OBSERVABLE ANTERIOR (que, no caso, será o observable que segurará a DATA ENVIADA, COMO PAYLOAD, por nossa action de 'AuthActions.AUTH_START')...

        (authData: AuthActions.AuthStart) => {  ////data contida dentro de nosso object 'action' de 'AUTH_START' (com o payload e etc)... --> sempre coloque o 'type' desse argumetno como sendo EQUIVALENTE À CLASS/action que você definiu lá no arquivo de class, que também será a action que vai triggar esse effect específico....

                        ////dentro desse operator, vamos retornar a MESMA LÓGICA DE LOGIN QUE TÍNHAMOS NO NOSSO SERVICE DE 'LOGIN'...
            
            
            
                        const requestHeaders = new HttpHeaders();

                        requestHeaders.append('Content-Type', 'application/json');
                    

                        const httpAuthData = {
                            email: authData.payload.email,
                            password: authData.payload.password;
                        }
                    
            
                        return this.http
            .post<AuthResponseData>(

              `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${environment.firebaseAPIKey}`,
              httpAuthData,
      
              {
                headers: requestHeaders,
              }
            )
        }
    )
    )

    constructor(private actions$: Actions, private http: HttpClient) {  //// a naming convention é realmente usar 'actions$' ($ ao final)  ---> uma das naming conventions é nomear TODOS OS OBSERVABLES DO ANGULAR Com '$' AO FINAL...
 
    }



    
}





















--> OK...