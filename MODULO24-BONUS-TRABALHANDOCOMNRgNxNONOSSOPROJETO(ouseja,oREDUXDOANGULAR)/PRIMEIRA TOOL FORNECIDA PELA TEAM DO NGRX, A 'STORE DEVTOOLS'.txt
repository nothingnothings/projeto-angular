













---> NOSSO APP JÁ ESTÁ SE MOLDANDO,



JÁ 


ESTÁ COM UM FORMATO ADEQUADO,





MAS A QUESTÃO É QUE ESTAMOS MOVENDO CADA VEZ MAIS LÓGICA PARA DENTRO DO NGRX...













--> JÁ TERMINAMOS AS FEATURE AREAS 




DE 'AUTH' E 'SHOPPING LSIT',








E AGORA 


SÓ RESTA A PARTE DO 'RECIPEBOOK'...













-> É CLARO QUE AINDA TEMOS AQUELE SERVICE DE 'DATA STORAGE', usado pelo professor (usado para SALVAR/RETRIEVAR DATA LÁ DO BACKEND, DA FIREBASE REALTIME DATABASE)...















-> MAS AGORA DEVEMOS FOCAR NO RECIPEBOOK...














--> OK... MAS ANTES DE PROSSEGUIRMOS, O PROFESSOR QUER MELHORAR UM POUCO NOSSA EXPERIÊNCIA 


DE DEVELOPMENT...

















-----> ATÉ AGORA,


NÓS 




DEMOS UMA OLHADA NO NGRX,

SIM,


SEMPRE 




O ESTUDAMOS.. 










-> MAS SERIA BEM MAIS LEGAL 

SE PUDÉSSEMOS 

DAR UMA OLHADA  APROFUNDADA NAS SUAS COISAS;






TER UM LOG LEGAL DAS _ DIFERENTES ACTIONS SENDO DISPATCHEADAS,

QUAL DATA 


ELAS CARREGAM,




E COMO ELAS MUDAM SUA 'GLOBAL APP STORE'..













-> BEM, VOCÊ PODE TER ESSA DEV EXPERIENCE,


BASTA INSTALAR UMA DEVELOPMENT 




TOOL ESPECIAL... ----> 








É A EXTENSION DE 'REDUX DEVTOOLS'..








redux-devtools-extension -->  zalmoxisus...












-----> GITHUB.... --> BASTA SEGUIR O LINK PARA 






ENTENDER COMO INSTALAR ESSA EXTENSÃO NO CHROME/FIREFOX...














->BAIXE A PACKAGE, TUDO CERTINHO..















--> OK.... ISSO FEITO,







VOCÊ 





SÓ TEM QUE 






USAR ESSA EXTENSION...











--> ASSIM QUE VOCê TIVER INSTALADO ESSA EXTENSION,


VOCÊ 


PODE _ INSTALAR_ UMA PACKAGE ESPECIAL NO SEU PROJECT,









QUE É A 


'npm install --save-dev @ngrx/store-devtools'..














-----> OK, DEPOIS DISSO REINICIAMOS 'NG SERVE',









...







--> mas PARA SERMOS CAPAZES 



DE USAR 



ESSA PACKAGE QUE FOI INSTALADA, USÁ-LA COM AQUELA EXTENSION,




VOCÊ DEVE IR ATÉ O 'app.module.ts'


E ENTÃO REGISTRAR UM NOVO MODULE,







tipo assim:













import { }  from "@ngrx/store-devtools";












-> IMPORTE A PACKAGE DE 'StoreDevToolsModule'...














--> COM ESSE IMPORT ADICIONADO, 




COLOQUE-O DENTRO DO ARRAY DE IMPORTS DO SEU APP...






tipo assim:





// import { StoreDevToolsModule} from '@ngrx/store-devtools';  ////instale com 'npm install --save-dev store-devtools'











-> COM ISSO IMPORTADO,







escreva 



assim:









imports: [




    StoreDevToolsModule
]











-> ISSO FEITO,



CHAME '.instrument()'




NESSE 



MODULE...











'instrument()'




É UM METHOD _ QUE EXIGE UM OBJECT COMO PARÂMETRO..








EX:









StoreDevToolsModule.instrument({ })













-> DENTRO DESSE OBJECT,



VOCê 



DEVE CONFIGURAR SUAS CARACTERÍSTICAS... 










-> O PROFESSOR VAI QUERER CONFIGURAR _ APENAS 1 COISINHA...







-. É A KEY DE 'logOnly',



QUE ELE VAI QUERER DEFINIR COMO sendo 'environment'... (que será importado lá do FOLDER DE ENVIRONMENTS, onde temos aquelas api keys)..









ex:









import { StoreDevToolsModule} from '@ngrx/store-devtools';  ////instale com 'npm install --save-dev store-devtools'



import { environment } from '../environments/environment';





@NgModule(
    {
        

        imports: [
            StoreDevToolsModule.instrument({logOnly: environment})
        ]
    }
)













-> AÍ, DENTRO DESSE ARQUIVO DE 'environment',






TEMOS ESTE CÓDIGO:





// This file can be replaced during build by using the `fileReplacements` array.
// `ng build` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.

export const environment = {
  production: false,
  firebaseAPIKey: 'AIzaSyBK3AXsu9Gn0fqLmA0zOdUAknDM48Nwk_o'
};

/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.


















-------> DENTRO DESSE CÓDIGO, TEMOS AQUELA KEY DE 'production',

QUE ESTÁ DEFINIDA COMO 'false'...










--> ELA FICA DEFINIDA COMO 'FALSE' DURANTE O DEVELOPMENT,



MAS 


NAQUELE ARQUIVO DE 'envirnoment.prod.ts',





ENCONTRAMOS ESSA KEY COMO SENDO 'true'...











--> COMO VOCê APRENDEU,


ESSES 2 ARQUIVOS SÃO SWAPPADOS AUTOAMTICAMENTE PELO CLI 



QUANDO 

FAZEMOS BUILD POR PROD/DEVELOPMENT..














--> OK... EM OUTRAS PALAVRAS,



ESSA CONSTANTE DE 'environment'



TEM ESSA PROPRIEDADE DE 'production',


QUE É FALSE 





DURANTE O DEV,


MAS TRUE 


DURANTE PRODUCTION...








-> É POR ISSO QUE O PROFESSOR 






ESTÁ DEFININDO 'logOnly'






COMO EQUIVALENTE à PROPRIEDADE DE 'environment.production' 

(

    pq durante o DEV, ESSE NEGÓCIO SERÁ 'FALSE',



    o que vai DESABILITAR ESSA OPTION DE logOnly,


    pq estARÁ DEFINIDA COMO FALSE....
)






----> isso significa que 

O OUTPUT SERÁ RESTRITO A APENAS __ 'ALGUMAS LOG MESSAGES'



QUANDO ESTIVERMOS NO MODO DE PRODUCTION..









ex:







StoreDevToolsModule.instrument({logOnly: environment.production})


















COM ISSO ADICIONADO, VOCë PODE SALVAR SEU APP E ENTÃO EXAMINAR AS DEVTOOLS....






-> VOCÊ ENCONTRARÁ UMA EXTENSION DE 'redux' NAS DEVTOOLS...









-> CLICANDO ALI, ENCONTRAMOS A MESMA UI 




USADA LÁ NO PROJECT REACT,



aquela 


ui fancy 



com várias coisas..









SE VOCÊ SCROLLAR PARA CIMA,

VERÁ ALGUMAS 'INITIALIZATION ACTIONS',






QUE 



FORAM MENCIONADAS PELO PROFESSOR MAIS CEDO NESSE MÓDULO... --> ESSAS ACTIONS SÃO IMPORTANTES 

PARA O INITIALIZE  DO SEU STATE...















-------> LÁ VEMOS 'O QUE ESTAVA SENDO DISPATCHED',



TAMBÉM 'COMO O STATE FICOU, APÓS ESSE DISPATCH'...











-> vemos também QUAL ACTION 

FOI DISPATCHEADA,

MAIS INFO SOBRE A ACCTION...


(payload de cada action ,etc)....










--> TAMBÉM PODEMOS VER COISAS DO STATE, como 'isLoading'...









-> PODEMOS VER AS DIFERENTES STEPS QUE ESTAVAM SENDO EXECUTADAS NO NOSSO APP....











-> ok, é o mesmo princípio do react, em outras palavras....








-> VOCÊ PODE SIMULAR DIFERENTES STATES,


E TER UM FEELING 'DAQUILO QUE O NGRX ESTÁ FAZENDO POR TRÁS DAS CENAS'...








-> É BEM ÚTIL,

EM OUTRAS PALAVRAS...





EX:









import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
// import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http'

import { AppComponent } from './app.component';

import { HeaderComponent } from './headerComponent/headerComponent.app';

import { RecipeBookService } from './recipeBook.service';
import { ShoppingListService } from './shoppingList.service';
import { GenericErrorPageComponent } from './generic-error-page/generic-error-page.component';
import { AppRoutingModule } from './app-routing.module';
import { HomePageComponent } from './home-page/home-page.component';


import { HttpInterceptorService } from 'src/app/httpInterceptor.service';

import { SharedModule } from './shared/shared.module';
import { LoggingService } from './logging.service';
import { StoreModule } from '@ngrx/store';

import { StoreDevtoolsModule } from '@ngrx/store-devtools';  ////instale com 'npm install --save-dev store-devtools'


import { environment } from 'src/environments/environment';
// import { shoppingListReducer } from './ShoppingList/store/shoppingList.reducer';

// import { ShoppingListReducer } from './ShoppingList/store/shoppingList.reducer';

// import { shoppingListReducer } from './ShoppingList/store/shoppingList.reducer';
import { reducers } from '.';
import { EffectsModule } from '@ngrx/effects';
import { AuthEffects } from './auth/store/auth.effects'; ///um dos EFFECTS de nosso código...

// import { AuthModule } from './auth/auth.module';   ///LAZILY LOADED EM 'app.routing-module.ts'...
// import { AlertDynamicComponent } from './shared/alertVersaoNgIf (bem mais pratica)/alert.component';



@NgModule({
  declarations: [
    AppComponent,
    HeaderComponent,

    GenericErrorPageComponent,
    HomePageComponent,

  ],
  imports: [
    // AuthModule, ///outsourcing em essa 'feature module'...  ////depois removemos esse import daqui, pq passamos a fazer LAZYLOADING desse module, com a ajuda de 'app-routing.module.ts'...
    
    
    // StoreModule.forRoot( ////é o 'CENTRAL STORE' de nosso app, implementado com NGRX...  //// aqui, precisamos dizer 'QUAIS REDUCERS VÃO SER USADOS NO NOSSO APP, QUE VÃO COMPOR NOSSA CENTRAL STORE, essencialmente'...
    //   { ///1 identifier para cada 'PARTE/REDUCER' do seu app, cada parte do state do seu app....
    //      shoppingList: shoppingListReducer       
    //   }
    // ),
    StoreDevtoolsModule.instrument({logOnly: environment.production}), ////USADO COM A EXTENSÃO 'REDUX DEV TOOLS' do chrome/firefox...
    StoreModule.forRoot(
      reducers
    ),
    EffectsModule.forRoot([AuthEffects]), //essencial para o run de código async com nossos reducers (Suportando nossos reducers com código async)....
                    ///nesse 'forRoot()" do EffectsModule vocÊ deve passar um ARRAY DE SEUS 'ROOT' EFFECTS /effect classes...
    BrowserModule,
 
    AppRoutingModule,  //módulo de routing, customizado por nós...
    HttpClientModule,
 
    SharedModule   ///outsourcing...

  ],

  providers: [RecipeBookService, ShoppingListService, LoggingService,
    {
      provide: HTTP_INTERCEPTORS,
      useClass: HttpInterceptorService,
      multi: true
    }
  
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }














certo...











-- mas mesmo com tudo isso, o nosso 'redux dev tools' ainda não está funcionando (não está registrando nada, por alguma razão)...








VI ISTO AQUI:











26

There is an issue with Angular app when Redux doesn't see your Store

Check that you have

StoreDevtoolsModule.instrument({maxAge: 25, logOnly: environment.production})
after

StoreModule.forRoot(reducers)
Otherwise you are in trouble.

BTW, it is better to install DevTools with

ng add @ngrx/store-devtools
It adds schematics to the project.


















ok... AGORA FUNCIONOU... E O CÓDIGO FICOU ASSIM:













import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
// import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http'

import { AppComponent } from './app.component';

import { HeaderComponent } from './headerComponent/headerComponent.app';

import { RecipeBookService } from './recipeBook.service';
import { ShoppingListService } from './shoppingList.service';
import { GenericErrorPageComponent } from './generic-error-page/generic-error-page.component';
import { AppRoutingModule } from './app-routing.module';
import { HomePageComponent } from './home-page/home-page.component';


import { HttpInterceptorService } from 'src/app/httpInterceptor.service';

import { SharedModule } from './shared/shared.module';
import { LoggingService } from './logging.service';
import { StoreModule } from '@ngrx/store';

import { StoreDevtoolsModule } from '@ngrx/store-devtools';  ////instale com 'npm install --save-dev store-devtools'


// import { shoppingListReducer } from './ShoppingList/store/shoppingList.reducer';

// import { ShoppingListReducer } from './ShoppingList/store/shoppingList.reducer';

// import { shoppingListReducer } from './ShoppingList/store/shoppingList.reducer';
import { reducers } from '.';
import { EffectsModule } from '@ngrx/effects';
import { AuthEffects } from './auth/store/auth.effects';
import { environment } from '../environments/environment'; ///um dos EFFECTS de nosso código...

// import { AuthModule } from './auth/auth.module';   ///LAZILY LOADED EM 'app.routing-module.ts'...
// import { AlertDynamicComponent } from './shared/alertVersaoNgIf (bem mais pratica)/alert.component';



@NgModule({
  declarations: [
    AppComponent,
    HeaderComponent,

    GenericErrorPageComponent,
    HomePageComponent,

  ],
  imports: [
    // AuthModule, ///outsourcing em essa 'feature module'...  ////depois removemos esse import daqui, pq passamos a fazer LAZYLOADING desse module, com a ajuda de 'app-routing.module.ts'...
    
    
    // StoreModule.forRoot( ////é o 'CENTRAL STORE' de nosso app, implementado com NGRX...  //// aqui, precisamos dizer 'QUAIS REDUCERS VÃO SER USADOS NO NOSSO APP, QUE VÃO COMPOR NOSSA CENTRAL STORE, essencialmente'...
    //   { ///1 identifier para cada 'PARTE/REDUCER' do seu app, cada parte do state do seu app....
    //      shoppingList: shoppingListReducer       
    //   }
    // ),
    
    StoreModule.forRoot(
      reducers
    ),
    StoreDevtoolsModule.instrument({logOnly: environment.production}), ////USADO COM A EXTENSÃO 'REDUX DEV TOOLS' do chrome/firefox... --> E SEMPRE ADICIONE ESSA 'FEATURE' DEPOIS  DO SET DO REDUCER (código de ''StoreModule.forRoot(reducers)' ), PQ CASO CONTRÁRIO ISSO _NÃO FUNCIONARÁ...
    EffectsModule.forRoot([AuthEffects]), //essencial para o run de código async com nossos reducers (Suportando nossos reducers com código async)...
                    ///nesse 'forRoot()" do EffectsModule vocÊ deve passar um ARRAY DE SEUS 'ROOT' EFFECTS /effect classes...
    BrowserModule,
 
    AppRoutingModule,  //módulo de routing, customizado por nós...
    HttpClientModule,
 
    SharedModule,
 
    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: environment.production })   ///outsourcing...

  ],

  providers: [RecipeBookService, ShoppingListService, LoggingService,
    {
      provide: HTTP_INTERCEPTORS,
      useClass: HttpInterceptorService,
      multi: true
    }
  
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }




























CERTO..





AGORA DEVO VER A SEGUNDA FEATURE QUE O PROFESSOR DISSE QUE IA NOS ENSINAR, O 'ROUTER STORE'...
