










-> na última lição, aprendemos que 

temos 

'@ViewChild()',


e aprendemos 

sobre 


COMO PODEMOS 

 

 O ACESSAR NOS NOSSOS LIFECYCLE HOOKS, POR MEIO DO CÓDIGO DE 
















 export class ServerItemComponent implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy { //aqui fazemos IMPLEMENT das INTERFACES que pretendemos usar...


    serverNumber: number = 0;

  @Input('srvElement') element: {
    name: string;
    type: string;
    content: string;
  } = {
    name: '',
    type: '',
    content: '',
  };


  @Input() name: string;///approach/demo de 


  @ViewChild('heading', {static: true}) header: ElementRef



  constructor() {
    ///é executado ANTES DE ONINIT... (primeiro na ordem)
    console.log('server-item constructor called');
  }

  ngOnChanges(changes: SimpleChanges) {  ////este é o ÚNICO HOOK _ QUE RECEBE_ UM PARÂMETRO....
    ///é executado DEPOIS DE 'constructor' (segundo na ordem), MAS __ ANTES_ DE 'onInit'....
    console.log('server-item ngOnChanges called', changes);
  }

  ngOnInit(): void {
    ///é executado DEPOIS de CONSTRUCTOR (terceiro na ordem)

    console.log('server-item ngOnInit called');
    console.log(this.header.nativeElement.textContent)  //esse value/element ainda NÃO TERÁ SIDO DEFINIDO (mt cedo no LIFECYCLE HOOK)
  }


  
 ngDoCheck() {
  console.log('server-item ngDoCheck called')
}



ngAfterContentInit(): void {
  console.log('server-item ngAfterContentInit Called')
}


ngAfterContentChecked(): void {
  console.log('server-item ngAfterContentChecked Called')
}


ngAfterViewInit(): void {
  console.log('server-item ngAfterviewInit Called')
  console.log(this.header.nativeElement.textContent)  //esse value/element JÁ TERÁ SIDO DEFINIDO (os ELEMENTOS DE SEU TEMPLATE JÁ TERÃO SIDO CARREGADOS, no seu lifecycle hook ) -->  aí vocÊ pode pegar o value desses items no template/usar esses values...
}


ngAfterViewChecked(): void {
  console.log('server-item ngAfterviewChecked Called')
}

ngOnDestroy(): void {
  console.log('server-item ngOnDestroy called')
}

}








----------------------










---> só podíamos  usar isso A PARTIR DO 'REACH' 

do hook de 

'ngAfterViewInit()'...










--> MAS HÁ MAIS UMA PEQUENA ADIÇÃO,


em 



'app.componment.html',



EM QUE 







ADICIONAMOS O 'CONTENT' 
QUE É 



__PROJETADO_ PARA DENTRO 



DE 'server-item',


ENTRE AQUELES OPENING E CLOSING TAGS DE 


'<server-item>',

como visto auqi;




  <div class="row">
    <div class="col-xs-12">
      <button class="btn btn-primary" (click)="onChangeFirst()">Change First Element</button>
      <app-server-item 
      (click)="onServerRemoved(indexOfServer)"
      *ngFor="let serverElement of serverElements; let indexOfServer=index"

      [srvElement]="serverElement" 
      [name]="serverElement.name"
      >
        <!-- ESTES 2 '<p>' FORAM INSERIDOS ENTRE A OPENING E ECLOSING TAGS DE 'app-server-item', e só conseguiram ser inseridos PQ ESCREVEMOS '<ng-content>' lá no CÓDIGO DE 'app-server-item', NO LOCAL EM QUE AUTORIZAMOS O 'INSERT' dessas 2 linhas '<p>'....'-->
      <p>
        <strong *ngIf="serverElement.type === 'server'" style="color: red">{{   
          serverElement.content
        }}</strong>
        <em *ngIf="serverElement.type === 'blueprint'">{{ serverElement.content }}</em>
      </p>
  
    </app-server-item>
    </div>
  </div>















  ----> digamos que __ TAMBÉM QUEREMOS POSICIONAR 


  UMA 'LOCAL REFERENCE'

  naquele 

  '<p>'


  ali.... --> 




  por isso escrevemos algo como 

  #contentParagraph








  -----> MAS A QUESTÃO É QUE AGORA __ VAMOS QUERER __ USAR__ 



  ESSA 'REFERENCE/<p>'



  LÁ 


  NO NOSSO COMPONENT 'server-item'.... (

      o local em que 

      esse conteúdo de '<p>'


      vai acabar parando, no final das contas....
  )




  o código com a reference inicialmente fica assim:





  

  <div class="row">
    <div class="col-xs-12">
      <button class="btn btn-primary" (click)="onChangeFirst()">Change First Element</button>
      <app-server-item 
      (click)="onServerRemoved(indexOfServer)"
      *ngFor="let serverElement of serverElements; let indexOfServer=index"

      [srvElement]="serverElement" 
      [name]="serverElement.name"
      >
        <!-- ESTES 2 '<p>' FORAM INSERIDOS ENTRE A OPENING E ECLOSING TAGS DE 'app-server-item', e só conseguiram ser inseridos PQ ESCREVEMOS '<ng-content>' lá no CÓDIGO DE 'app-server-item', NO LOCAL EM QUE AUTORIZAMOS O 'INSERT' dessas 2 linhas '<p>'....'-->
      <p #contentParagraph
      
      >
        <strong *ngIf="serverElement.type === 'server'" style="color: red">{{   
          serverElement.content
        }}</strong>
        <em *ngIf="serverElement.type === 'blueprint'">{{ serverElement.content }}</em>
      </p>
  
    </app-server-item>
    </div>
  </div>











--> BEM, NO APP COMPONENT, 

QUE É ONDE ATUALMENTE POSICIONAMOS ISSO, NO TEMPLATE,




PODERÍAMOS USAR 


'@ViewChild()' 

em 

'app.component.ts',


PQ __ TECNICAMENTE 



ESSA REFERENCE 


AINDA ESTÁ 'NO TEMPLATE DO APP COMPONENT', 


mesmo que esteja essa reference SENDO 'KIND OF PASSED ON'  ao component custom de '<app-server-item>"...
 






--> JÁ QUE SABEMOS QUE __ ESSA REFERENCE VAI APARECER/SER PASSADA/EXISTIR LÁ 

NO 'app-server-item',





__ SERIA __ BOM SE TAMBÉM PUDÉSSEMOS ACESSAR ESSA REFERENCE/ELEMENTO LÁ DE DENTRO DE  



'server-item.ts' ---------> ENTRETANTO,




O DECORATOR DE '@ViewChild()" 

NÃO VAI FUNCIONAR 



VINCULADO A ESSE '#contentParagraph',




pq, SIMPLESMENTE, 


__ ESSA LOCAL REFERENCE NÃO EXISTE DENTRO DO TEMPLATE DE 'server-item-component.html'... (
    isso quer dizer que 



    O '#contentParagraph', esse parágrafo,


    NAÕ FAZ PARTE DA VIEW DE 'app-server-item',

    E SIM 
    __ DE SEU CONTENT_...
)------------> 





E É EXAATMENTE POR ESSA RAZÃO QUE TEMOS AQUELES HOOKS ADICIONAIS nesse component,



o 



'ngAfterContentInit()' 


e 



'ngAfterViewInit()'...















--> A BOA NOTÍCIA, AQUI, 

É QUE 




EXISTE MAIS DO QUE APENAS '@ViewChild'...










-> EXISTE TAMBÉM O '@ContentChild()'... ----->











ESSE É OUTRO DECORATOR ESPECIAL...








--> ESSE DECORATOR ___tAMBÉM__ NOS DEIXA__ 

PASSAR 


UM 


SELECTOR,




no caso o 'reference name'....









-_> vamos escrever, portanto:







@ContentChild('contentParagraph', {static: true})








------> ESCOLHEMOS ISSO AÍ E ENTÃO ESCOLHEMOS UM PROPERTY NAME..






eX:






@ContentChild('contentParagraph', {static: true}) paragraph: ElementRef;






ESSE negócio terá um nome de 'paragraph', e um type de ElementRef. 
















-----> certo... -->  E AGORA PODEMOS O UTILIZAR... ---------> E EXATAMENTE COMO 





'@ViewChild()',






NÓS __ OBVIAMENTE NÃO PODEMOS ACESSAR O VALUE DO 'PARAGRAPH'




se não for alcançado o momento em que 


 

 '''' WE REACH THE  HOOK OF CONTENTINIT()''''...






 OU SEJA,

 É APENAS A PARTIR DO 

 HOOK DE 




 'ngAfterContentInit() {

 }
 '




 QUE CONSEGUIMOS 

 REALMENTE CONSEGUIR ACESSO A ESSE PARAGRAPH (



     os hooks 


     de 



    ngOnChanges(),


     ngOnInit()


     e 


     ngDoCheck()




     NÃO VÃO NOS RENDER UM VALOR NO CONSOLE.LOG,
     PQ 

     ESSE CONTENT AINDA NÃO TERÁ SIDO DEFINIDO...
 )












 CERTO, O CÓDIGO FICOU TIPO ASSIM:














 import {
  AfterContentChecked,
  AfterContentInit,
  AfterViewChecked,
  AfterViewInit,
  Component,
  ContentChild,
  DoCheck,
  ElementRef,
  Input,
  OnChanges,
  OnDestroy,
  OnInit,
  SimpleChanges,
  ViewChild,
  ViewEncapsulation,
} from '@angular/core';

@Component({
  selector: 'app-server-item',
  templateUrl: './server-item.component.html',
  styleUrls: ['./server-item.component.css'],
  encapsulation: ViewEncapsulation.Emulated, ////'encapsulation' é usada para _ COPIAR O COMPORTAMENTO DE 'CSS MODULES' (cada arquivo css é aplicado só AO COMPONENT A QUE ESTÁ VINCULADO, não sendo aplicados seus selectors aos DEMAIS COMPONENTS DO CÓDIGO).. ->_ esse comportamneto pode ser OVERWRITTEN, substituído pelo 'COMPORTAMENTO DEFAULT' de arquivos css (que é sempre aplicar os selectors A TODOS OS ELEMENTS DO SEU PROJETO)....

  ////encapsulation tem 3 MODOS: 'emulated' (default, é o padrão do angular, é o comportamento de 'css modules'), 'none' (aplica seus selectors a TODOS OS ELEMENTS DA PÁGINA, tendo um behavior de 'css/javascript' comum...),
  /// 'ShadowDom', antigamente chamado de 'Native', é uma opção que faz a MESMA COISA QUE EMULATED, mas com SUPORTE PIOR NOS BROWSERS...
})
export class ServerItemComponent implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy { //aqui fazemos IMPLEMENT das INTERFACES que pretendemos usar...


  // @Input() element: { /////USO DE '@Input' SEM O USO _ DE 'alias' para sua property name.... (element aqui será exatamente '[element]' no seu elemento html de 'app-server-item'...)
  //   ///por meio de '@Input' fazemos o _ 'EXPOSE' de sua given property '''' AO MUNDO''' (o que quer dizer que podemos PASSAR DATA A ESSA PROPRIEDADE de 'eleemnt' _ DO LADO_ DE FORA de seu element, tipo um react-props, pq VAMOS PODER PASSAR DATA LÁ DE UM 'PARENT COMPONENT' para esse nosso component de 'app-server-item', basta usar aquele PROPERTY BINDING de '[element]="yourValue/object"' ao COMPONENT DE 'app-server-item'....)
  //   name: string;
  //   type: string;
  //   content: string;
  // } = {
  //   name: '',
  //   type: '',
  //   content: '',
  // };

    

    serverNumber: number = 0;

  @Input('srvElement') element: {
    /////USO DE '@Input' COM O USO _ DE 'alias' para sua property name.... (element, essa propriedade, aqui terá nome de 'element', mas no HTML terá um NOME DISTINTO, como esse exemplo 'srvElement'...) --> isso ocorre por meio do PASS DO PARÂMETRO A 'input'..
    ///por meio de '@Input' fazemos o _ 'EXPOSE' de sua given property '''' AO MUNDO''' (o que quer dizer que podemos PASSAR DATA A ESSA PROPRIEDADE de 'eleemnt' _ DO LADO_ DE FORA de seu element, tipo um react-props, pq VAMOS PODER PASSAR DATA LÁ DE UM 'PARENT COMPONENT' para esse nosso component de 'app-server-item', basta usar aquele PROPERTY BINDING de '[element]="yourValue/object"' ao COMPONENT DE 'app-server-item'....)
    name: string;
    type: string;
    content: string;
  } = {
    name: '',
    type: '',
    content: '',
  };


  @Input() name: string;///approach/demo de 


  @ViewChild('heading', {static: true}) header: ElementRef



  @ContentChild('contentParagraphExample', {static: true}) paragraph: ElementRef;  ///aqui estamos acessando o valor do '<p>' que é passado como CONTENT ao nosso 'server-item' LÁ NO TEMPLATE DE 'app.component.html'...
                                                                                  //o valor desse '<p>' só poderá ser lido/acessado A PARTIR DO HOOK DE 'ngAfterContentInit()', e nunca antes disso (indisponível esse valor em ngOnChanges, ngOnInit e ngDoCheck....)

  constructor() {
    ///é executado ANTES DE ONINIT... (primeiro na ordem)
    console.log('server-item constructor called');
  }

  ngOnChanges(changes: SimpleChanges) {  ////este é o ÚNICO HOOK _ QUE RECEBE_ UM PARÂMETRO....
    ///é executado DEPOIS DE 'constructor' (segundo na ordem), MAS __ ANTES_ DE 'onInit'....
    console.log('server-item ngOnChanges called', changes);


    console.log('contentParagraphExample', 'onChanges', this.paragraph.nativeElement.innerText)
  }

  ngOnInit(): void {
    ///é executado DEPOIS de CONSTRUCTOR (terceiro na ordem)

    console.log('server-item ngOnInit called');
    console.log(this.header.nativeElement.textContent)  //esse value/element ainda NÃO TERÁ SIDO DEFINIDO (mt cedo no LIFECYCLE HOOK)
    console.log('contentParagraphExample', 'onInit', this.paragraph.nativeElement.innerText)
  }


  
 ngDoCheck() {
  console.log('server-item ngDoCheck called')
  console.log('contentParagraphExample', 'onDoCheck', this.paragraph.nativeElement.innerText)
}



ngAfterContentInit(): void {
  console.log('server-item ngAfterContentInit Called')
  console.log('contentParagraphExample', 'onAfterContentInit', this.paragraph.nativeElement.innerText)
}


ngAfterContentChecked(): void {
  console.log('server-item ngAfterContentChecked Called')
}


ngAfterViewInit(): void {
  console.log('server-item ngAfterviewInit Called')
  console.log(this.header.nativeElement.textContent)  //esse value/element JÁ TERÁ SIDO DEFINIDO (os ELEMENTOS DE SEU TEMPLATE JÁ TERÃO SIDO CARREGADOS, no seu lifecycle hook ) -->  aí vocÊ pode pegar o value desses items no template/usar esses values...
}


ngAfterViewChecked(): void {
  console.log('server-item ngAfterviewChecked Called')
}

ngOnDestroy(): void {
  console.log('server-item ngOnDestroy called')
}

}












-> SALVAMOS TUDO E EXECUTAMOS....












---> certo... observamos  que só é possível obter o value de '<p>'


a partir do 

hook de 

'ngAfterContentInit'..











--> ok... esse era o pedaço faltando.. 





-> é assim que acessamos elementos no dom E TRABALHAMSO COM ESSES LIFECYCLE HOOKS....