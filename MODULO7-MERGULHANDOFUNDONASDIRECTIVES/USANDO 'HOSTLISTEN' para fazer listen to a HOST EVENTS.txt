





VIMOS 2 EXEMPLOS PARA 'DIRECTIVES',



o exemplo de 

'BasicHighlightDirective'




e 


'BetterHighlightDirective'...








ex:













import { Directive, ElementRef } from '@angular/core'; //VOCÊ TAMBÉM DEVE IMPORTAR E DECLARAR ESSA DIRECTIVE LÁ NO ARQUIVO 'app.module.ts' do seu projeto, senão ela não funcionará


import { OnInit } from '@angular/core';
@Directive({ ////esse object vai CONFIGURAR essa directive...

    selector: '[appBasicHighlight]'  //escreva o selector dessa directive de forma 'camelCase'...
                                    ////usamos '[]' pq isso realmente será usado como um DIRECTIVE, ATTRIBUTE DIRECTIVE, uma directive/COISA que VIVE DENTRO DOS OUTROS COMPONENTS DE SEU TEMPLATE/ELEMENTS DO SEU TEMPLATE... --> basta escrever 'appBasicHighlight' dentro de um elemento, sem '[]', que ele será reconhecido como esse 'attribute directive'...s
})
export class BasicHighlightDirective implements OnInit { //sempre importe 'OnInit()', pois o lifecycle hook de 'ngOnInit()' é MT ÚTIL para directives... (melhor definir coisas de nosso elemento lá em 'ngOnInit', e não diretamente no constructor)...



    constructor(private elementRef: ElementRef) {   /// o parâmetro que representa esse 'element' em que a directive foi posicionada é 'elementRef', que possui esse type de 'ElementRef'......
        ///é no constructor de nossa 'directive' QUE VAMOS __ GANHAR _ ACESSO AO 'ELEMENT/COMPONENT' em que essa directive é posicionada (seja esse element um <p>, um <h1>, um <input>, qualquer coisa)....
                //aqui também usamos aquele SHORTCUT DO ANGULAR, para adicionar essa propriedade como 'private property' de nossa class (para que possa ser usada sua data para todo tipo de coisa, dentro dessa directive/class)...
  
  
                // elementRef.nativeElement.xxxx = ''; ///TIPO ASSIM... --> assim já poderíamos editar coisas do elemneto em que foi posicionada a directive, dentro desse constructor....  --> MAS É MELHOR FAZER ESSE TIPO DE COISA LÁ NO 'ngOnInit()' hook, e não aqui, diz o professor...
            }



            ngOnInit(): void {
                

                this.elementRef.nativeElement.style.backgroundColor = 'green';  //com isso, conseguimos MUDAR PROPRIEDADES DE NOSSO ELEMENTO DURANTE SUA INICIALIZAÇÕA, POR MEIO DE NOSSA DIRECTIVE...
            }
}


















e:












import { Directive } from '@angular/core';

import { Renderer2 } from '@angular/core'; ////uma ferramenta melhor do que utilizar 'elementRef.nativeElement.xxx' para definir coisas de nossos elements...

import { OnInit } from '@angular/core'; ///é mt comum usar esse hook para ESCREVER NOSSAS DIRECTIVES... (mt melhor fazer initialization work lá em 'ngOnInit', e não em 'constructor()')

import { ElementRef } from '@angular/core';

@Directive({
  selector: '[appBetterHighlight]',
})
export class BetterHighlightDirective implements OnInit {
  constructor(private elementRef: ElementRef, private renderer: Renderer2) {}

  ngOnInit(): void {
    // this.renderer        ////é assim que acessamos o renderer na nossa directive....  --> e ele nos dá um MONTE DE METHODS para manipular nosso element...

    this.renderer.setStyle(this.elementRef.nativeElement, 'background-color', 'blue'); /// nos deixa SETTAR O STYLE DE ALGUM ELEMENT...  --> o element que nos interessa, em que COLOCAMOS ESSA NOSSA DIRECTIVE, segue sendo referenciado por 'this.elementRef'....
        //você deve passar 'this.elementRef.nativeElement' (o underlying element dessa ELEMENT REFERENCE), e não 'this.elementRef' em si...
  

          //1o parâmetro --> element que queremos estilizar...
          ///2o parametro --> estilo que queremos definir 
          /////3o parametro --> VALOR do estilo que queremos definir 
          ///4o parametro --> FLAGS opcionais que queremos definir para esse style... (tag de '!important', para que o style overwritte outro style), 
  }
}













------> O 


APPROACH DE 


'better-highlight'


É MELHOR, SIM,



MAS __ DEFINITIVAMENTE NÃO É MT   'INTERATIVO'... --------------> 









pq agora, com isso,



ELE _ SEMPRE _NOS DARÁ _UM 


BACKGROUND AZUL,

por meio deste código:




this.renderer.setStyle(this.elementRef.nativeElement, 'background-color', 'blue');















-> O PROFESSOR QUER MUDAR ISSO... ----> O PROFESSOR QUER 


QUE ESSE ESTILO  DE 'BLUE' SÓ SEJA ALTERADO/APLICADO 




_ CASO __ NÓS _  FAÇAMOS 'HOVER' em cima 

desse element....



















--------> PARA ISSO,

PARA APLICAR ESSE ESTILO CONDICIONALMENTE ('hover"),






PRECISAMOS _ FAZER 




'REACT' 

A ALGUNS EVENTS QUE 


FOREM OCORRER NO ELEMENT EM SI... ( o element em que a DIRECTIVE  de 'betterhighlight' FOI POSICIONADA )










------> E 


UMA MANEIRA FÁCIL DE ESCREVER 






ESSE REACT A UM ELEMENTO 'HOVER',


DE DENTRO DA DIRECTIVE EM SI,






_ É _ SIMPLESMENTE__ ADICIONAR UM NOVO DECORATOR,



decorator de 



'@HostListener'











------> IMPORTAMOS ESSE DECORATOR E AÍ SIMPLESMENTE 



__ O ADICIONAMOS_ A ALGUM 



METHOD QUE QUEREMOS UTILIZAR....









ex:








import { Directive, Host } from '@angular/core';

import { Renderer2 } from '@angular/core'; ////uma ferramenta melhor do que utilizar 'elementRef.nativeElement.xxx' para definir coisas de nossos elements...

import { OnInit } from '@angular/core'; ///é mt comum usar esse hook para ESCREVER NOSSAS DIRECTIVES... (mt melhor fazer initialization work lá em 'ngOnInit', e não em 'constructor()')

import { ElementRef } from '@angular/core';

import { HostListener } from '@angular/core';   ////é usado para ESCREVER LÓGICA A PARTIR DE 'EVENTS' que ocorrerem nesse nosso element (como 'click', 'hover', etc)...

@Directive({
  selector: '[appBetterHighlight]',
})
export class BetterHighlightDirective implements OnInit {
  constructor(private elementRef: ElementRef, private renderer: Renderer2) {}


  @HostListener()




  ngOnInit(): void {
    // this.renderer        ////é assim que acessamos o renderer na nossa directive....  --> e ele nos dá um MONTE DE METHODS para manipular nosso element...

    this.renderer.setStyle(this.elementRef.nativeElement, 'background-color', 'blue'); /// nos deixa SETTAR O STYLE DE ALGUM ELEMENT...  --> o element que nos interessa, em que COLOCAMOS ESSA NOSSA DIRECTIVE, segue sendo referenciado por 'this.elementRef'....
        //você deve passar 'this.elementRef.nativeElement' (o underlying element dessa ELEMENT REFERENCE), e não 'this.elementRef' em si...
  

          //1o parâmetro --> element que queremos estilizar...
          ///2o parametro --> estilo que queremos definir 
          /////3o parametro --> VALOR do estilo que queremos definir 
          ///4o parametro --> FLAGS opcionais que queremos definir para esse style... (tag de '!important', para que o style overwritte outro style), 
  }
}





















------> OK, PRECISAMOS ESCREVER UM METHOD DEPOIS de 


'' ''  @HostListener() ''',








POR ISSO O PROFESSOR ESCREVE 

'mouseOver()' 














FICA TIPO ASSIM:














  @HostListener() mouseOver() {

  }















  ----> OK...  O METHOD da direita __ VAI _ SER TRIGGADO SEMRPE QUE O EVENT 



  ESPECIFICADO DENTRO DE '@HostListener'


  FOR DETECTADO,


  tipo assim:





  
  @HostListener('mouseenter') mouseOver() { ///quando o event especificado em 'hostListener' acontecer ('hover', nesse exemplo), O METHOD DA DIREITA SERÁ DISPARADO...

  }








O CÓDIGO VAI FICANDO ASSIM:





  @HostListener('mouseenter') mouseOver() { ///quando o event especificado em 'hostListener' acontecer ('hover', nesse exemplo), O METHOD DA DIREITA SERÁ DISPARADO...

  }














  --> QUEREMOS 'mouseenter',



  mas poderíamos ter colocado 'hover', etc etc....












  -----> TODOS OS EVENTS DISPONÍVEIS,

  QUE VOCÊ PODERIA/PODE USAR COM 

  'EVENT BINDING',



  ficam disponíveis aqui também...













  --> PROFESSOR COLOCA UM 'mouseenter',


  E
   AÍ 









   VAI ESCREVENDO LÓGICA...







   --> ELE DIZ QUE PODEMOS __ COLOCAR UM PARÂMETRO 


   '''' eventData'''' 

   dentro do parâmetro do method,


DE TYPE 

'Event',

para que 

ESSA EVENTDATA CONSIGA SER PASSADA A NÓS...








tipo assim:






  @HostListener('mouseenter') mouseOver(eventData: Event) { ///quando o event especificado em 'hostListener' acontecer ('hover', nesse exemplo), O METHOD DA DIREITA SERÁ DISPARADO...
            //// a eventData é RECEBIDA NESSA PARÂMETRO, SE ASSIM O DESEJARMOS...


            
  }


















  --> OBS::: O LISTEN A 'CUSTOM EVENTS' TAMBÉM É POSSÍVEL, AQUI... ( 

      ou seja,


      é exatamente 


      como fizemos 



      com aqueles códigos em que  

      PASSÁVAMOS 

      EVENT DATA CUSTOMIZADA,



        event data customizada aos nossos methods..
  )



--> e é exaatmente isso que está acontecendo aqui,


pq 


 '@HostListener'

 É APENAS 
 UMA 

 MANEIRA CONVENIENTE DE FAZER 'LISTEN TO EVENTS' 




 EM 1 ELEMENT EM QUE 

 É 

 POSICIONADA ESSA 'ATTRIBUTE DIRECTIVE'... ---------> 











 COM ISSO,

 FAZEMOS 

 'LISTEN' 

 a 




 events de 'mouseenter'... ---> 







 NÃO VAMOS PRECISAR DA eventData,



 MAS HÁ CASOS EM QUE VAMOS QUERER...







 --> MAS AÍ, DENTRO DESSE 


 'HostListener',



 VAMOS QUERER TROCAR A COR DA 'backgroundColor'




 DESSE ELEMENTo...








 EX:







   @HostListener('mouseenter') mouseOver(eventData: Event) { ///quando o event especificado em 'hostListener' acontecer ('hover', nesse exemplo), O METHOD DA DIREITA SERÁ DISPARADO...
            //// a eventData é RECEBIDA NESSA PARÂMETRO, SE ASSIM O DESEJARMOS...


            this.renderer.setStyle(this.elementRef.nativeElement, 'background-color', 'red')


  }
















  -------> FUNCIONOU...










  -------> agora quando passo o mouse em cima,




  ele fica com um style de 'red'..









  --> O PROFESSOR TAMBÉM CRIA UM NOVO METHOD, COM CÓDIGO PARECIDO,

  MAS 



  COM UM EVENT DE 'mouseleave',


  E AÍ 

  DEIXA 

  A 

  COR COMO 'transparent'...







  ex:






     @HostListener('mouseenter') mouseOver(eventData: Event) { ///quando o event especificado em 'hostListener' acontecer ('hover', nesse exemplo), O METHOD DA DIREITA SERÁ DISPARADO...
            //// a eventData é RECEBIDA NESSA PARÂMETRO, SE ASSIM O DESEJARMOS...


            this.renderer.setStyle(this.elementRef.nativeElement, 'background-color', 'red')


  }





     @HostListener('mouseleave') mouseLeave(eventData: Event) { ///quando o event especificado em 'hostListener' acontecer ('hover', nesse exemplo), O METHOD DA DIREITA SERÁ DISPARADO...
            //// a eventData é RECEBIDA NESSA PARÂMETRO, SE ASSIM O DESEJARMOS...


            this.renderer.setStyle(this.elementRef.nativeElement, 'background-color', 'transparent')


  }















--> OK, FUNCIONOU, ESTÁ FUNCIONANDO COMO QUERÍAMOS,

aGORA 

 
 COM "@HostListener'



 reagindo a QUAISQUER EVENTS...